gtf_sep <-
separate(gtf_raw, V9, c("transcript","transcript_id","gene","gene_id","end"),
sep = "\"", remove = TRUE, convert = FALSE, extra = "merge", fill = "right")
gtf_sep$row <- seq(1,length(gtf_raw$V1),by=1)
gtf_sep_g  <- gtf_sep %>% filter(V3 == "gene")
gtf_sep_o <- gtf_sep %>% filter(!is.na(gene_id))
gtf_sep_t <- gtf_sep %>% filter(V3 == "transcript")
gtf_sep_t <- separate(gtf_sep_t, transcript, c("gene_id","transcript"),  sep = "\\.", remove = FALSE, convert = FALSE, extra = "merge", fill = "right")
gene_list_sub <- gsub(predictionType,'file_1_file_1', gene_list)
gtf_rows <-
sort(c(
gtf_sep_g$row[gtf_sep_g$transcript %in% gene_list_sub],
gtf_sep_o$row[gtf_sep_o$gene_id %in% gene_list_sub],
gtf_sep_t$row[gtf_sep_t$gene_id %in% gene_list_sub]
))
gtf_filt <- gtf_raw[gtf_rows,]
return(gtf_filt)
}
braker1_filt <- filterGTF(
predictionType = "braker1",
inputFile='genome_files/FSJ2.BRAKER1.gtf.gz',
gene_list = finalGene_tally$best_model[finalGene_tally$source == "BRAKER1"])
braker2_filt <- filterGTF(
predictionType = "braker1",
inputFile='genome_files/FSJ2.BRAKER2.gtf.gz',
gene_list = finalGene_tally$best_model[finalGene_tally$source == "BRAKER2"])
braker2_filt <- filterGTF(
predictionType = "braker2",
inputFile='genome_files/FSJ2.BRAKER2.gtf.gz',
gene_list = finalGene_tally$best_model[finalGene_tally$source == "BRAKER2"])
inputFile= 'genome_files/FSJ2.stringtieMerged.gtf'
View(finalGene_tally)
predictionType = "stringtie"
inputFile= 'genome_files/FSJ2.stringtieMerged.gtf'
gene_list = finalGene_tally$best_model[finalGene_tally$source == "stringtie"]
gtf_raw <- fread(inputFile)
gtf_raw <- fread(inputFile,sep = "\t", skip = 2)
gtf_raw
split_gtf
split_gtf <-
separate(gtf_raw, V9, c("gene","gene_id","transcript","transcript_id","exon","exon_id","finalColumns"),
sep = "\"", remove = TRUE, convert = FALSE, extra = "merge", fill = "right")
split_gtf
gtf_sep$row <- seq(1,length(gtf_raw$V1),by=1)
gtf_raw
gtf_sep
gtf_sep <-
separate(gtf_raw, V9, c("gene","gene_id","transcript","transcript_id","exon","exon_id","finalColumns"),
sep = "\"", remove = TRUE, convert = FALSE, extra = "merge", fill = "right")
gtf_sep$row <- seq(1,length(gtf_raw$V1),by=1)
gtf_sep_g  <- gtf_sep %>% filter(V3 == "gene")
gtf_sep_g
gtf_sep_o <- gtf_sep %>% filter(!is.na(gene_id))
gtf_sep_o
gtf_sep_o <- gtf_sep %>% filter(!is.na(gene_id) & V3 %ni% c("gene","transcript"))
gtf_sep_o
gtf_sep_t <- separate(gtf_sep_t, transcript, c("gene_id","transcript"),  sep = "\\.", remove = FALSE, convert = FALSE, extra = "merge", fill = "right")
gtf_sep_t <- gtf_sep %>% filter(V3 == "transcript")
gtf_sep_t
gtf_sep
gtf_sep
gene_list
gene_list_sub <- gsub(STRG,'MSTRG.', gene_list)
gene_list_sub <- gsub('STRG','MSTRG.', gene_list)
gene_list_sub
gtf_rows <-
sort(
gtf_sep$row[gtf_sep$gene_id %in% gene_list_sub])
gtf_rows
gtf_filt <- gtf_raw[gtf_rows,]
gtf_filt
filterGTF <- function(inputFile,gene_list,predictionType){
if(predictionType == "stringtie"){
gtf_raw <- fread(inputFile,sep = "\t", skip = 2)
gtf_sep <-
separate(gtf_raw, V9, c("gene","gene_id","transcript","transcript_id","exon","exon_id","finalColumns"),
sep = "\"", remove = TRUE, convert = FALSE, extra = "merge", fill = "right")
gtf_sep$row <- seq(1,length(gtf_raw$V1),by=1)
gene_list_sub <- gsub('STRG','MSTRG.', gene_list)
gtf_rows <-
sort(
gtf_sep$row[gtf_sep$gene_id %in% gene_list_sub])
}
if(predictionType %in% c("braker1","braker2")){
gtf_raw <- fread(inputFile)
gtf_sep <-
separate(gtf_raw, V9, c("transcript","transcript_id","gene","gene_id","end"),
sep = "\"", remove = TRUE, convert = FALSE, extra = "merge", fill = "right")
gtf_sep$row <- seq(1,length(gtf_raw$V1),by=1)
gtf_sep_g  <- gtf_sep %>% filter(V3 == "gene")
gtf_sep_t <- gtf_sep %>% filter(V3 == "transcript")
gtf_sep_t <- separate(gtf_sep_t, transcript, c("gene_id","transcript"),  sep = "\\.", remove = FALSE, convert = FALSE, extra = "merge", fill = "right")
gtf_sep_o <- gtf_sep %>% filter(!is.na(gene_id) & V3 %ni% c("gene","transcript"))
gene_list_sub <- gsub(predictionType,'file_1_file_1', gene_list)
gtf_rows <-
sort(c(
gtf_sep_g$row[gtf_sep_g$transcript %in% gene_list_sub],
gtf_sep_o$row[gtf_sep_o$gene_id %in% gene_list_sub],
gtf_sep_t$row[gtf_sep_t$gene_id %in% gene_list_sub]
))
}
gtf_filt <- gtf_raw[gtf_rows,]
return(gtf_filt)
}
braker1_filt <- filterGTF(
predictionType = "braker1",
inputFile='genome_files/FSJ2.BRAKER1.gtf.gz',
gene_list = finalGene_tally$best_model[finalGene_tally$source == "BRAKER1"])
braker2_filt <- filterGTF(
predictionType = "braker2",
inputFile='genome_files/FSJ2.BRAKER2.gtf.gz',
gene_list = finalGene_tally$best_model[finalGene_tally$source == "BRAKER2"])
stringer_filt <- filterGTF(
predictionType = "stringtie",
inputFile= 'genome_files/FSJ2.stringtieMerged.gtf',
gene_list = finalGene_tally$best_model[finalGene_tally$source == "stringtie"])
today()
genes_filt <-
rbind.data.frame(braker2_filt,braker1_filt)
write.table(genes_filt, file = "FSJ2.annotation.r220213.gtf",
append = F, quote = FALSE, sep = "\t",
eol = "\n", na = "NA", dec = ".", row.names = FALSE,
col.names = FALSE, qmethod = c("escape", "double"))
paste("FSJ2.annotation.",today,".gtf",sep="")
today <- "r220213"
paste("FSJ2.annotation.",today,".gtf",sep="")
library(tidyverse)
library(data.table)
require(R.utils) #for opening gzipped files
library(foreach)
library(doParallel)
options(scipen=999)
cores=detectCores() #uncomment these two lines if you want to use more than 4 cores
cl <- makeCluster(round(cores[1]/2)) #not to overload your computer
#cl <- makeCluster(4) #not to overload your computer
registerDoParallel(cl)
#setwd('/scratch/fbeaudry/geneCombo/')
#setwd('~/Documents/Github/genomeContent/')
coding_window_size = 1000
windowSizelog = log(0.0001,10)
braker_score_cutoff = 0.85
aves_busco_N = 8338
#windowSizelog number is for the size of the window to merge identical busco genes, in mb so 0.0001 = 100bp
#window sized determined by answering the question 'what size leads to accurate merging of tandem duplicates?' manually
####functions####
'%ni%' <- function(x,y)!('%in%'(x,y))
getGenomeBUSCO  <- function(genomeBUSCOFile,aves_busco_N = 8338){
genome_busco <- fread(genomeBUSCOFile,sep="\t",header=TRUE,select = c(1:10),fill=TRUE)
names(genome_busco)[2] <- "genome"
cat("Genome-assembly BUSCO completeness: ", 100*round(length(unique(genome_busco$Busco_id[genome_busco$genome != "Missing"]))/aves_busco_N,3),"%\n")
# buscos_raw <- unique(genome_busco$Busco_id)
for(id in unique(genome_busco$Busco_id)){
genome_busco$dupCount[genome_busco$Busco_id == id] <- c(1:length(genome_busco$Busco_id[genome_busco$Busco_id == id]))
}
genome_busco$dupName <- paste(genome_busco$Busco_id,genome_busco$dupCount,sep="d")
return(genome_busco)
}
reformatGTF <- function(inputFile,predictionType,buscoFile=NA,aves_busco_N = 8338){
cat("## Reformatting ",predictionType,"##\n" )
#autoload BUSCO file if BUSCO file name is not passed to function
if(is.na(buscoFile)){
buscoFile <- paste(predictionType,'.busco.tsv',sep="")
cat(paste("**assuming busco file is called ",predictionType,'.busco.tsv**',sep=""))
}
#load BUSCO
busco <- fread(buscoFile,sep="\t",header=TRUE,fill=TRUE)
#split predictino type into stringtie and BRAKER1
if(predictionType == "stringtie"){
annotation <- fread(inputFile,sep = "\t", skip = 2)
ann_filt <- annotation %>% filter(V3 == "exon") %>% arrange(V1, V4)
split_gtf <-
separate(ann_filt, V9, c("gene","gene_id","transcript","transcript_id","exon","exon_id","finalColumns"),
sep = "\"", remove = TRUE, convert = FALSE, extra = "merge", fill = "right")[,c(1:8,10,12)]
busco <- separate(busco, Sequence, c("transcript_id","pos"),
sep = "_stringtie:", remove = TRUE, convert = FALSE, extra = "merge", fill = "right")
}
if(predictionType %in% c("braker1","braker2")){
annotation <- fread(inputFile,sep = "\t")
ann_filt <- annotation %>% filter(V3 == "CDS") %>% arrange(V1, V4)
split_gtf <-
separate(ann_filt, V9, c("transcript","transcript_id","gene","gene_id","finalColumns"),
sep = "\"", remove = TRUE, convert = FALSE, extra = "merge", fill = "right") [,c(1:8,12,10)]
busco <- separate(busco, Sequence, c("transcript_id","pos"),  sep = ":", remove = TRUE, convert = FALSE, extra = "merge", fill = "right")
busco$transcript_id <- paste(predictionType,"_",busco$transcript_id,sep="")
busco <- busco[,c(1,2,3,4,8,9,10,11)]
split_gtf$gene_id <- gsub('file_1_file_1', predictionType, split_gtf$gene_id)
split_gtf$transcript_id <- gsub('file_1_file_1', predictionType, split_gtf$transcript_id)
}
suppressMessages( exons <- left_join(split_gtf,busco) )
names(exons) <- c('scaffold','origin','annotation','start_pos','end_pos',
'annotation_score','direction','readingFrame','gene_id','transcript_id',
'busco_id', 'busco_status','busco_pos','busco_score',
'busco_length','busco_gene_link','busco_gene_description')
exons$transcript_id <- gsub('MSTRG.', 'STRG', exons$transcript_id)
exons$gene_id       <- gsub('MSTRG.', 'STRG', exons$gene_id)
cat("Unique Annotated Genes: ",length(unique(exons$gene_id)),"\n" )#unique genes
cat("Annotation BUSCO completeness: ", round(length(unique(exons$busco_id)) / aves_busco_N,3)*100,"%","\n")
exon_tally <- exons %>% group_by(transcript_id) %>% tally()
cat("Unique Transcripts: ",sum(exon_tally$n) ,"\n")
exons_transcript <- exons %>% group_by(gene_id,transcript_id) %>% tally()
exons_gene <- exons_transcript  %>% group_by(gene_id) %>% tally()
cat("Average Alternate Transcripts/gene: ",mean(exons_gene$n) ,"\n")
cat("Max Alternate Transcripts/gene: ", max(exons_gene$n) ,"\n")
exons$origin <- predictionType
return(exons)
}
addNonCoding2Stringtie <- function(CPCfile){
noncod_string <- fread(CPCfile)
names(noncod_string)[1] <- "ID"
noncod_string$ID <- gsub('MSTRG.', 'STRG',noncod_string$ID)
noncod_string <- separate(noncod_string, ID, c("stringtie_gene","stringtie_t"),  sep = "\\.", remove = FALSE, convert = FALSE, extra = "merge", fill = "right")
noncod_string_p <- noncod_string %>% group_by(stringtie_gene,label) %>% tally()
noncod_string_p <- noncod_string_p[order(noncod_string_p$label, decreasing=FALSE),]
noncod_string_p_clean <- noncod_string_p[!duplicated(noncod_string_p$stringtie_gene),]
return(noncod_string_p_clean)
}
returnLongestTranscript <- function(genes_byGene,win,coding_window_size){
longestTranscript <-
suppressMessages(
genes_byGene %>% group_by(gene_id,transcript_id) %>%
summarise(codingLength = sum(gene_length),winStart=min(start_pos),winEnd=max(end_pos)) %>%
top_n(n=1,wt = codingLength)
)
longestTranscript <- longestTranscript[1,]
if(longestTranscript$winStart < win){
longestTranscript$codingLength <- longestTranscript$codingLength - (longestTranscript$winStart - win)
}
if(longestTranscript$winEnd > (win+coding_window_size)){
longestTranscript$codingLength <- longestTranscript$codingLength - (longestTranscript$winEnd - (win+coding_window_size))
}
return( longestTranscript[,c(1,3)])
}
makeBuscoConvert <- function(coding_win,genome_busco,aves_busco_N = 8338){
coding_win$win_sr <- round(coding_win$win_s,windowSizelog)
genome_busco$win_sr <- round(genome_busco$Gene_Start,windowSizelog)
braker1_buscoConvert <- coding_win %>%
filter( !is.na(braker1_busco) & braker1_gene %ni% c("bad_exon","overlapping_exons") ) %>%
dplyr::select(chrom,braker1_gene,braker1_busco,win_sr) %>% distinct()
braker2_buscoConvert <- coding_win %>%
filter( !is.na(braker2_busco) & braker2_gene %ni% c("bad_exon","overlapping_exons") ) %>%
dplyr::select(chrom,braker2_gene,braker2_busco,win_sr) %>% distinct()
stringtie_buscoConvert <- coding_win %>%
filter( !is.na(stringtie_busco) & stringtie_gene %ni% c("bad_exon","overlapping_exons") ) %>%
dplyr::select(chrom,stringtie_gene,stringtie_busco,win_sr) %>% distinct()
all_busco <-
left_join(genome_busco,braker1_buscoConvert,by=c("Busco_id"="braker1_busco","Sequence"="chrom","win_sr"="win_sr")) %>%
left_join(braker2_buscoConvert,by=c("Busco_id"="braker2_busco","Sequence"="chrom","win_sr"="win_sr")) %>%
left_join(stringtie_buscoConvert,by=c("Busco_id"="stringtie_busco","Sequence"="chrom","win_sr"="win_sr"))
cat("BUSCO completeness of combined annotation: ",
(length(unique( all_busco$Busco_id[!is.na(all_busco$braker1_gene) |!is.na(all_busco$braker2_gene) |!is.na(all_busco$stringtie_gene)] ))/aves_busco_N)*100,
"%")
cat("\nBUSCO completeness compared to genome: ",
100*round(length(unique( all_busco$Busco_id[!is.na(all_busco$braker1_gene) |!is.na(all_busco$braker2_gene) |!is.na(all_busco$stringtie_gene)] ))/length(unique(genome_busco$Busco_id[genome_busco$genome != "Missing"])),3),"%\n")
busco_convert <- all_busco %>% select(dupName,braker1_gene,braker2_gene,stringtie_gene) %>% melt(id.vars="dupName") %>% filter(!is.na(value))
return(busco_convert)
}
findBestHomolog <- function(coding_win,mode){
if(mode == "braker"){
Bests <- unique(coding_win$braker_best)
best_tally <- coding_win %>% group_by(braker_best) %>% tally()
homolog_inference <- coding_win %>%
filter(!is.na(braker1_gene) & !is.na(braker2_gene) & braker1_gene %ni% c("bad_exon","overlap") & braker2_gene %ni% c("bad_exon","overlap")) %>%
group_by(braker1_gene,braker2_gene) %>% tally() %>%
arrange(braker1_gene,braker2_gene, -n) %>%
filter(duplicated(braker1_gene) == FALSE)  %>% ungroup() %>%
filter(duplicated(braker2_gene) == FALSE)
homolog_best <- homolog_inference %>% select("braker1_gene","braker2_gene") %>%
left_join(best_tally,by=c("braker1_gene"="braker_best")) %>%
left_join(best_tally,by=c("braker2_gene"="braker_best"))
}
if(mode == "stringtie"){
Bests <- unique(coding_win$best_model)
best_tally <- coding_win %>% group_by(best_model) %>% tally()
homolog_inference <- coding_win %>%
filter(!is.na(braker_best) & !is.na(stringtie_gene) & stringtie_gene %ni% c("overlap")) %>%
group_by(braker_best,stringtie_gene) %>% tally() %>%
arrange(braker_best,stringtie_gene, -n) %>%
filter(duplicated(braker_best) == FALSE)  %>% ungroup() %>%
filter(duplicated(stringtie_gene) == FALSE)
homolog_best <- homolog_inference %>% select("braker_best","stringtie_gene") %>%
left_join(best_tally,by=c("braker_best"="best_model")) %>%
left_join(best_tally,by=c("stringtie_gene"="best_model"))
homolog_best$n.y <- 0
}
names(homolog_best)[c(1:2)] <- c("first","second")
homolog_best$n.x[is.na(homolog_best$n.x)] <- 0
homolog_best$n.y[is.na(homolog_best$n.y)] <- 0
homolog_best$best <- ifelse(homolog_best$n.x >= homolog_best$n.y,
homolog_best$first,
homolog_best$second)
homolog_best$worst <- ifelse(homolog_best$n.x >= homolog_best$n.y,
homolog_best$second,
homolog_best$first)
best <- homolog_best %>% filter(worst %in% Bests) %>% ungroup() %>% select(best,worst)
return(best)
}
####file intake####
homology_convert <- fread('genome_files/FSJ2.convert.txt')
sizes <- fread('genome_files/FSJ2.scaffSizes.txt')
homology_sizes <- left_join(sizes,homology_convert,by=c("V1"="V2"))
names(homology_sizes) <- c("scaf","chrom_length","homolog")
genome_busco <- getGenomeBUSCO(genomeBUSCOFile='genome_files/FSJ2.genome_busco.tsv')
stringtie <- reformatGTF(predictionType="stringtie",
inputFile= 'genome_files/FSJ2.stringtieMerged.gtf',
buscoFile="genome_files/FSJ2.stringtie_busco.tsv")
braker1 <- reformatGTF(predictionType="braker1",
inputFile='genome_files/FSJ2.BRAKER1.gtf.gz',
buscoFile="genome_files/FSJ2.BRAKER1_busco.tsv")
braker2 <- reformatGTF(predictionType="braker2",
inputFile='genome_files/FSJ2.BRAKER2.gtf.gz',
buscoFile="genome_files/FSJ2.BRAKER2_busco.tsv")
genes <- rbind.data.frame(braker1,braker2,stringtie)
genes$gene_length <- genes$end_pos - genes$start_pos
genes <- genes[order(genes$scaffold,genes$start_pos),]
load(file="coding_win")
coding_win$braker1_gene[coding_win$braker1_score < braker_score_cutoff] <- "bad_exon"
coding_win$braker2_gene[coding_win$braker2_score < braker_score_cutoff] <- "bad_exon"
coding_win$braker1_score[is.na(coding_win$braker1_score)] <- 0
coding_win$braker2_score[is.na(coding_win$braker2_score)] <- 0
coding_win$braker_best <- ifelse(coding_win$braker1_score >= coding_win$braker2_score,coding_win$braker1_gene,coding_win$braker2_gene)
coding_win$braker_best[coding_win$braker_best == "bad_exon"] <- NA
braker_best <- findBestHomolog(coding_win=coding_win,mode="braker")
coding_win<- left_join(coding_win,braker_best,by=c("braker_best"="worst"))
coding_win$braker_best[!is.na(coding_win$best)] <- coding_win$best[!is.na(coding_win$best)]
##
coding_win$best_model <- coding_win$braker_best
coding_win$best_model[is.na(coding_win$braker1_gene) & is.na(coding_win$braker2_gene) & !is.na(coding_win$stringtie_gene) ] <-
coding_win$stringtie_gene[is.na(coding_win$braker1_gene) & is.na(coding_win$braker2_gene) & !is.na(coding_win$stringtie_gene) ]
stringtie_best <- findBestHomolog(coding_win=coding_win,mode="stringtie")
coding_win<- left_join(coding_win,stringtie_best,by=c("best_model"="worst"))
coding_win$best_model[!is.na(coding_win$best.y)] <- coding_win$best.y[!is.na(coding_win$best.y)]
length(unique(coding_win$best_model))
busco_convert <- makeBuscoConvert(coding_win=coding_win,genome_busco=genome_busco)
coding_win_busco <- left_join(coding_win,busco_convert,by=c("best_model"="value"))
coding_win_busco$final_gene <- coding_win_busco$best_model
coding_win_busco$final_gene[!is.na(coding_win_busco$dupName)] <- coding_win_busco$dupName[!is.na(coding_win_busco$dupName)]
#
coding_win_busco$source <- NA
#coding_win_busco$source[coding_win_busco$final_gene %in% na.omit(unique(genome_busco$dupName))] <- "BUSCO"
coding_win_busco$source[coding_win_busco$best_model %in% na.omit(unique(coding_win_busco$braker1_gene))] <- "BRAKER1"
coding_win_busco$source[coding_win_busco$best_model %in% na.omit(unique(coding_win_busco$braker2_gene))] <- "BRAKER2"
coding_win_busco$source[coding_win_busco$best_model %in% na.omit(unique(coding_win_busco$stringtie_gene))] <- "stringtie"
##
noncoding <- addNonCoding2Stringtie(CPCfile='genome_files/FSJ2.stringtie_cpc.txt')
coding_win_nc <- left_join(coding_win_busco,noncoding)
finalGene_tally <- coding_win_nc %>% filter(!is.na(final_gene) & final_gene != "overlapping_exons") %>% group_by(source,final_gene,best_model) %>%  tally()
#
filterGTF <- function(inputFile,gene_list,predictionType){
if(predictionType == "stringtie"){
gtf_raw <- fread(inputFile,sep = "\t", skip = 2)
gtf_sep <-
separate(gtf_raw, V9, c("gene","gene_id","transcript","transcript_id","exon","exon_id","finalColumns"),
sep = "\"", remove = TRUE, convert = FALSE, extra = "merge", fill = "right")
gtf_sep$row <- seq(1,length(gtf_raw$V1),by=1)
gene_list_sub <- gsub('STRG','MSTRG.', gene_list)
gtf_rows <-
sort(
gtf_sep$row[gtf_sep$gene_id %in% gene_list_sub])
}
if(predictionType %in% c("braker1","braker2")){
gtf_raw <- fread(inputFile)
gtf_sep <-
separate(gtf_raw, V9, c("transcript","transcript_id","gene","gene_id","end"),
sep = "\"", remove = TRUE, convert = FALSE, extra = "merge", fill = "right")
gtf_sep$row <- seq(1,length(gtf_raw$V1),by=1)
gtf_sep_g  <- gtf_sep %>% filter(V3 == "gene")
gtf_sep_t <- gtf_sep %>% filter(V3 == "transcript")
gtf_sep_t <- separate(gtf_sep_t, transcript, c("gene_id","transcript"),  sep = "\\.", remove = FALSE, convert = FALSE, extra = "merge", fill = "right")
gtf_sep_o <- gtf_sep %>% filter(!is.na(gene_id) & V3 %ni% c("gene","transcript"))
gene_list_sub <- gsub(predictionType,'file_1_file_1', gene_list)
gtf_rows <-
sort(c(
gtf_sep_g$row[gtf_sep_g$transcript %in% gene_list_sub],
gtf_sep_o$row[gtf_sep_o$gene_id %in% gene_list_sub],
gtf_sep_t$row[gtf_sep_t$gene_id %in% gene_list_sub]
))
}
gtf_filt <- gtf_raw[gtf_rows,]
return(gtf_filt)
}
braker1_filt <- filterGTF(
predictionType = "braker1",
inputFile='genome_files/FSJ2.BRAKER1.gtf.gz',
gene_list = finalGene_tally$best_model[finalGene_tally$source == "BRAKER1"])
braker2_filt <- filterGTF(
predictionType = "braker2",
inputFile='genome_files/FSJ2.BRAKER2.gtf.gz',
gene_list = finalGene_tally$best_model[finalGene_tally$source == "BRAKER2"])
stringer_filt <- filterGTF(
predictionType = "stringtie",
inputFile= 'genome_files/FSJ2.stringtieMerged.gtf',
gene_list = finalGene_tally$best_model[finalGene_tally$source == "stringtie"])
braker1_filt
braker1_filt$V9 <- gsub("file_1","b1",braker1_filt$V9)
braker1_filt
braker2_filt$V9 <- gsub("file_1","b2",braker2_filt$V9)
genes_filt <-
rbind.data.frame(braker2_filt,braker1_filt)
today <- "220213"
today <- "220226"
write.table(genes_filt, file = paste("FSJ2.annotation.",today,".gtf",sep=""),
append = F, quote = FALSE, sep = "\t",
eol = "\n", na = "NA", dec = ".", row.names = FALSE,
col.names = FALSE, qmethod = c("escape", "double"))
setwd("/Users/felixbeaudry/Documents/GitHub/ZDropping/alleleFreqModel")
library(tidyverse)
`%ni%` <- Negate(`%in%`)
setwd("/Users/felixbeaudry/Documents/GitHub/ZDropping/alleleFreqModel")
##annotate
fread('FSJfullPedFiltDogFINAL12July2016final.ind1.vcf',skip = "#")
##annotate
faux_vcf <- fread('FSJfullPedFiltDogFINAL12July2016final.ind1.vcf',skip = "#")
frameworkSNPs <- read.table('frameworkSNPs.list')
frameworkSNPs$SNP <- paste(frameworkSNPs$V1,frameworkSNPs$V2,sep="_")
fullMap <- read.table('all.fixed.txt',fill = T)
fullMap$SNP <- paste(fullMap$V1,fullMap$V2,sep="_")
AframeworkMap <- fullMap %>% filter(V1 %ni% c(39,41) & SNP %in% frameworkSNPs$SNP)
chip <- read.table('working_files/chrom.map',fill=TRUE,header=TRUE)
ASNPS_chip <- left_join(chip,AframeworkMap,by=c("SNPname"="V3"))
map<-read.table('working_files/geno.map',header=TRUE)
ASNPS <- map[map$V1 %ni% c(39,41) ,]
ASNPS$map_pos <- seq(1,length(ASNPS$V1))
ASNPS$SNP_name <- names(indivlistgeno_A[,-c(1:8)])
ASNPS_chip <- left_join(ASNPS_chip,ASNPS[,c(2,6)],by=c("SNPname"="V2"))
ASNPS
setwd("/Users/felixbeaudry/Documents/GitHub/ZDropping/alleleFreqModel")
load(file='working_files/intermediate_files/indivlistgeno_A.rdata')
frameworkSNPs <- read.table('frameworkSNPs.list')
frameworkSNPs$SNP <- paste(frameworkSNPs$V1,frameworkSNPs$V2,sep="_")
fullMap <- read.table('all.fixed.txt',fill = T)
fullMap$SNP <- paste(fullMap$V1,fullMap$V2,sep="_")
AframeworkMap <- fullMap %>% filter(V1 %ni% c(39,41) & SNP %in% frameworkSNPs$SNP)
#ZframeworkMap <- fread('frameworkMap.Z.txt')
#ASNPS_frame <- left_join(ASNPS,AframeworkMap,by=c("V2"="V3"))
chip <- read.table('working_files/chrom.map',fill=TRUE,header=TRUE)
ASNPS_chip <- left_join(chip,AframeworkMap,by=c("SNPname"="V3"))
map<-read.table('working_files/geno.map',header=TRUE)
ASNPS <- map[map$V1 %ni% c(39,41) ,]
ASNPS$map_pos <- seq(1,length(ASNPS$V1))
ASNPS$SNP_name <- names(indivlistgeno_A[,-c(1:8)])
ASNPS_chip <- left_join(ASNPS_chip,ASNPS[,c(2,6)],by=c("SNPname"="V2"))
library(tidyverse)
`%ni%` <- Negate(`%in%`)
setwd("/Users/felixbeaudry/Documents/GitHub/ZDropping/alleleFreqModel")
load(file='working_files/intermediate_files/indivlistgeno_A.rdata')
frameworkSNPs <- read.table('frameworkSNPs.list')
frameworkSNPs$SNP <- paste(frameworkSNPs$V1,frameworkSNPs$V2,sep="_")
fullMap <- read.table('all.fixed.txt',fill = T)
fullMap$SNP <- paste(fullMap$V1,fullMap$V2,sep="_")
AframeworkMap <- fullMap %>% filter(V1 %ni% c(39,41) & SNP %in% frameworkSNPs$SNP)
#ZframeworkMap <- fread('frameworkMap.Z.txt')
#ASNPS_frame <- left_join(ASNPS,AframeworkMap,by=c("V2"="V3"))
chip <- read.table('working_files/chrom.map',fill=TRUE,header=TRUE)
ASNPS_chip <- left_join(chip,AframeworkMap,by=c("SNPname"="V3"))
map<-read.table('working_files/geno.map',header=TRUE)
ASNPS <- map[map$V1 %ni% c(39,41) ,]
ASNPS$map_pos <- seq(1,length(ASNPS$V1))
ASNPS$SNP_name <- names(indivlistgeno_A[,-c(1:8)])
ASNPS_chip <- left_join(ASNPS_chip,ASNPS[,c(2,6)],by=c("SNPname"="V2"))
ASNPS_chip
faux_vcf
##annotate
faux_vcf <- fread('FSJfullPedFiltDogFINAL12July2016final.ind1.vcf',skip = "#")
faux_vcf
names(faux_vcf)[10]
names(faux_vcf)[10] <- "fauxInd"
faux_vcf$fauxInd <- "0/1"
faux_vcf
ASNPS_chip
ASNPS_chip %>% dplyr::select(SNPname,NewScaff,SNPpos,SNP_name)
faux_vcf
ASNPS_chip %>% dplyr::select(SNPname,NewScaff,SNPpos,SNP_name) %>% left_join(faux_vcf,by=c("SNPname"="ID"))
ASNPS_chip %>% dplyr::select(SNPname,NewScaff,SNPpos,SNP_name) %>%
left_join(faux_vcf,by=c("SNPname"="ID")) %>% filter(!is.na(REF))
faux_vcf_pos <- ASNPS_chip %>% dplyr::select(SNPname,NewScaff,SNPpos,SNP_name) %>%
left_join(faux_vcf,by=c("SNPname"="ID")) %>% filter(!is.na(REF))
faux_vcf_pos
faux_vcf_pos <- ASNPS_chip %>% dplyr::select(SNPname,NewScaff,SNPpos,SNP_name) %>%
left_join(faux_vcf,by=c("SNPname"="ID")) %>% filter(!is.na(SNP_name))
faux_vcf_pos
faux_vcf
faux_vcf_pos
faux_vcf_pos %>% dplyr::select(NewScaff,SNPpos,SNP_name,REF, ALT, QUAL, FILTER, INFO, FORMAT)
faux_vcf_pos %>% dplyr::select(NewScaff,SNPpos,SNP_name,REF, ALT, QUAL, FILTER, INFO, FORMAT) %>% arrange(NewScaff,SNPpos)
faux_vcf_pos %>% dplyr::select(NewScaff,SNPpos,SNP_name,REF, ALT, QUAL, FILTER, INFO, FORMAT) %>% arrange(NewScaff,SNPpos) %>% filter(NewScaff != "*")
faux_vcf_pos
faux_vcf_pos$SNPpos <- as.numeric(faux_vcf_pos$SNPpos )
faux_vcf_pos
faux_vcf_pos %>% dplyr::select(NewScaff,SNPpos,SNP_name,REF, ALT, QUAL, FILTER, INFO, FORMAT) %>% arrange(NewScaff,SNPpos) %>% filter(NewScaff != "*")
faux_vcf_sort <- faux_vcf_pos %>% dplyr::select(NewScaff,SNPpos,SNP_name,REF, ALT, QUAL, FILTER, INFO, FORMAT) %>% arrange(NewScaff,SNPpos) %>% filter(NewScaff != "*")
names(faux_vcf)
names(faux_vcf_sort) <- names(faux_vcf)
faux_vcf
faux_vcf_sort <- faux_vcf_pos %>% dplyr::select(NewScaff,SNPpos,SNP_name,REF, ALT, QUAL, FILTER, INFO, FORMAT,fauxInd) %>% arrange(NewScaff,SNPpos) %>% filter(NewScaff != "*")
faux_vcf_sort
names(faux_vcf_sort) <- names(faux_vcf)
faux_vcf_sort
write.table(faux_vcf_sort, file = paste("faux_vcf_sort.vcf",sep=""),
append = F, quote = FALSE, sep = "\t",
eol = "\n", na = "NA", dec = ".", row.names = FALSE,
col.names = TRUE, qmethod = c("escape", "double"))
fread("faux_vcf_sort.ann.vcf")
annotated_snps <- fread("faux_vcf_sort.ann.vcf")
annotated_snps
fread('snp_annotation.txt')
fread('snp_annotation.txt',header=F)
fread('snp_annotation.txt',header=F) %>% dplyr::select(V2) %>% tally()
fread('snp_annotation.txt',header=F) %>% group_by(V2) %>% tally()
fread('snp_annotation.txt',header=F) %>% group_by(V2) %>% tally()
fread('snp_annotation.txt',header=F) %>% group_by(V3) %>% tally()
fread('snp_annotation.txt',header=F) %>% group_by(V2,V3) %>% tally()
fread('snp_annotation.txt',header=F) %>% group_by(V2,V3) %>% tally() %>% arrange(V3)
