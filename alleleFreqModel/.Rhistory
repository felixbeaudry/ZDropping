#pedigree + genotype data
ped<-read.table('FSJpedgeno_Zsexlinked.ped',header=FALSE,sep=' ',stringsAsFactors=FALSE)
setwd('~/Documents/GitHub/ZDropping/ExpGenContrib')
#read in input files
#pedigree + genotype data
ped<-read.table('FSJpedgeno_Zsexlinked.ped',header=FALSE,sep=' ',stringsAsFactors=FALSE)
pedigree<-ped[,1:6]
pedigree
pedigree<-ped[,1:5]
names(pedigree)<-c('Fam','Indiv','Dad','Mom','Sex')
write.table(pedigree,file="pedigree.txt",quote=FALSE,sep=" ",row.names=FALSE,col.names=TRUE)
#read in input files
#pedigree + genotype data
ped<-read.table('pedigree.txt',header=FALSE,sep=' ',stringsAsFactors=FALSE)
#nestling data
indiv<-read.table('working_files/IndivDataUSFWS.txt',header=TRUE,sep='\t',stringsAsFactors=FALSE)
cohortAll<-indiv[!is.na(indiv$NatalYear),1:2]
#assign immigrants from each year a different allele
#let's just use the year imm first appeared
imm<-pedigree[pedigree$Dad=='0',2:5]
imm$minObs<-laply(imm$Indiv,function(x) indiv[indiv$Indiv==x,'ImmCohort'])
#start in 1990
#all indiv assigned "0 0" genotypes
pedigree$allele1<-0
pedigree$allele2<-0
#assign "1 1" genotypes to immigrants from 1990 or before
pedigree[pedigree$Indiv %in% imm[,1],'allele1']<-1
pedigree[pedigree$Indiv %in% imm[,1],'allele2']<-1
#copy pedigree
pedigreeCopy<-pedigree
#immigrants in subsequent years (starting with 1990) given higher numbers.
for (x in 1991:2013)
{
# for males
pedigree[pedigree$Indiv %in% imm[imm$minObs==x&imm$Sex==1,1],'allele1']<-2*(x-1990)
pedigree[pedigree$Indiv %in% imm[imm$minObs==x&imm$Sex==1,1],'allele2']<-2*(x-1990)
# for females
pedigree[pedigree$Indiv %in% imm[imm$minObs==x&imm$Sex==2,1],'allele1']<-2*(x-1990)+1
pedigree[pedigree$Indiv %in% imm[imm$minObs==x&imm$Sex==2,1],'allele2']<-2*(x-1990)+1
}
write.table(pedigree,file="ImmContribYearly_malevsfemale.ped",quote=FALSE,sep=' ',row.names=FALSE,col.names=FALSE)
#immigrants in subsequent years (starting with 1991) given '2 2' genotypes if male and '3 3' genotypes if female
for (x in 1991:2013)
{
# for males
pedigreeCopy[pedigreeCopy$Indiv %in% imm[imm$minObs==x&imm$Sex==1,1],'allele1']<-2
pedigreeCopy[pedigreeCopy$Indiv %in% imm[imm$minObs==x&imm$Sex==1,1],'allele2']<-2
# for females
pedigreeCopy[pedigreeCopy$Indiv %in% imm[imm$minObs==x&imm$Sex==2,1],'allele1']<-3
pedigreeCopy[pedigreeCopy$Indiv %in% imm[imm$minObs==x&imm$Sex==2,1],'allele2']<-3
}
write.table(pedigreeCopy,file="ImmContribAll_malevsfemale.ped",quote=FALSE,sep=' ',row.names=FALSE,col.names=FALSE)
#print out file with nestling cohorts
write.table(cohortAll,file="allABSnestlings.txt",quote=FALSE,sep=" ",row.names=FALSE,col.names=FALSE)
setwd('~/Documents/GitHub/ZDropping/ExpGenContrib')
library(plyr)
#read in input files
#pedigree + genotype data
ped<-read.table('working_files/pedigree.txt',header=FALSE,sep=' ',stringsAsFactors=FALSE)
#nestling data
indiv<-read.table('working_files/IndivDataUSFWS.txt',header=TRUE,sep='\t',stringsAsFactors=FALSE)
cohortAll<-indiv[!is.na(indiv$NatalYear),1:2]
#assign immigrants from each year a different allele
#let's just use the year imm first appeared
imm<-pedigree[pedigree$Dad=='0',2:5]
imm$minObs<-laply(imm$Indiv,function(x) indiv[indiv$Indiv==x,'ImmCohort'])
#start in 1990
#all indiv assigned "0 0" genotypes
pedigree$allele1<-0
#read in input files
#pedigree + genotype data
pedigree<-read.table('working_files/pedigree.txt',header=FALSE,sep=' ',stringsAsFactors=FALSE)
setwd('~/Documents/GitHub/ZDropping/ExpGenContrib')
library(plyr)
#read in input files
pedigree<-read.table('working_files/pedigree.txt',header=FALSE,sep=' ',stringsAsFactors=FALSE)
#nestling data
indiv<-read.table('working_files/IndivDataUSFWS.txt',header=TRUE,sep='\t',stringsAsFactors=FALSE)
cohortAll<-indiv[!is.na(indiv$NatalYear),1:2]
#assign immigrants from each year a different allele
#let's just use the year imm first appeared
imm<-pedigree[pedigree$Dad=='0',2:5]
imm$minObs<-laply(imm$Indiv,function(x) indiv[indiv$Indiv==x,'ImmCohort'])
#start in 1990
#all indiv assigned "0 0" genotypes
pedigree$allele1<-0
pedigree$allele2<-0
#assign "1 1" genotypes to immigrants from 1990 or before
pedigree[pedigree$Indiv %in% imm[,1],'allele1']<-1
pedigree[pedigree$Indiv %in% imm[,1],'allele2']<-1
#copy pedigree
pedigreeCopy<-pedigree
#immigrants in subsequent years (starting with 1990) given higher numbers.
for (x in 1991:2013)
{
# for males
pedigree[pedigree$Indiv %in% imm[imm$minObs==x&imm$Sex==1,1],'allele1']<-2*(x-1990)
pedigree[pedigree$Indiv %in% imm[imm$minObs==x&imm$Sex==1,1],'allele2']<-2*(x-1990)
# for females
pedigree[pedigree$Indiv %in% imm[imm$minObs==x&imm$Sex==2,1],'allele1']<-2*(x-1990)+1
pedigree[pedigree$Indiv %in% imm[imm$minObs==x&imm$Sex==2,1],'allele2']<-2*(x-1990)+1
}
write.table(pedigree,file="working_files/intermediate_files/ImmContribYearly_malevsfemale.ped",quote=FALSE,sep=' ',row.names=FALSE,col.names=FALSE)
#immigrants in subsequent years (starting with 1991) given '2 2' genotypes if male and '3 3' genotypes if female
for (x in 1991:2013)
{
# for males
pedigreeCopy[pedigreeCopy$Indiv %in% imm[imm$minObs==x&imm$Sex==1,1],'allele1']<-2
pedigreeCopy[pedigreeCopy$Indiv %in% imm[imm$minObs==x&imm$Sex==1,1],'allele2']<-2
# for females
pedigreeCopy[pedigreeCopy$Indiv %in% imm[imm$minObs==x&imm$Sex==2,1],'allele1']<-3
pedigreeCopy[pedigreeCopy$Indiv %in% imm[imm$minObs==x&imm$Sex==2,1],'allele2']<-3
}
write.table(pedigreeCopy,file="working_files/intermediate_files/ImmContribAll_malevsfemale.ped",quote=FALSE,sep=' ',row.names=FALSE,col.names=FALSE)
#print out file with nestling cohorts
write.table(cohortAll,file="working_files/intermediate_files/allABSnestlings.txt",quote=FALSE,sep=" ",row.names=FALSE,col.names=FALSE)
setwd('~/Documents/GitHub/ZDropping/ExpGenContrib')
library(plyr)
#read in input files
pedigree<-read.table('working_files/pedigree.txt',header=FALSE,sep=' ',stringsAsFactors=FALSE)
#get founders
founders<-data.frame(USFWS=pedigree[pedigree$Dad=='0','Indiv'],stringsAsFactors=FALSE)
#only need to run sims for founders with kids
founders$kids<-founders$USFWS %in% c(pedigree$Dad,pedigree$Mom)
install.packages("gridGraphics")
library(plyr)
library(tidyr)
library(foreach)
library(dplyr)
library(doParallel)
library(data.table)
`%notin%` <- Negate(`%in%`)
####get input files###
#list of indiv in each category each year
load("simindivFIXmin2obs.rdata")
genotyped_official <- unique(simindivFIXmin2obs$USFWS[simindivFIXmin2obs$genotyped == "Y"])
load("FSJpedgeno_A.rdata")
ped_AgenoT <- ped_Ageno[ped_Ageno$V2 %in% genotyped_official,]
indivlist <- merge(simindivFIXmin2obs,ped_AgenoT[c(1,4)],by.x="USFWS",by.y="V2")
names(indivlist)<-c('Indiv','Year','Category','Genotyped','Mom','Dad','Sex')
indivlistgeno <- merge(indivlist,ped_AgenoT[,c(1,5:length(ped_AgenoT))],by.x="Indiv",by.y="V2")
####estimate values that are constant across SNPs####
samplePars<-data.frame(Year=c(1998:2013),stringsAsFactors=FALSE)
samplePars[samplePars$Year==1998,'Nt']<- 2*(length(indivlist[indivlist$Year==1998&indivlist$Category=='survivor'&indivlist$Sex==1,1]) + length(indivlist[indivlist$Year==1998&indivlist$Category=='survivor'&indivlist$Sex==2,1]) + length(indivlist[indivlist$Year==1998&indivlist$Category=='immigrant'&indivlist$Sex==1,1]) +
length(indivlist[indivlist$Year==1998&indivlist$Category=='immigrant'&indivlist$Sex==2,1]) + length(indivlist[indivlist$Year==1998&indivlist$Category=='nestling'&indivlist$Sex==2,1]) + length(indivlist[indivlist$Year==1998&indivlist$Category=='nestling'&indivlist$Sex==1,1]))
for(yr in c(1999:2013)){
samYr<-samplePars$Year
indivYr<-indivlist[which(indivlist$Year==yr),]
#number of inds each yr in each category (total, survivors, immigrants, nestlings of each sex)
samplePars[samYr==yr,'NMs']<-2*length(indivYr[indivYr$Category=='survivor'&indivYr$Sex==1,1])
samplePars[samYr==yr,'NFs']<-2*length(indivYr[indivYr$Category=='survivor'&indivYr$Sex==2,1])
samplePars[samYr==yr,'NMi']<-2*length(indivYr[indivYr$Category=='immigrant'&indivYr$Sex==1,1])
samplePars[samYr==yr,'NFi']<-2*length(indivYr[indivYr$Category=='immigrant'&indivYr$Sex==2,1])
samplePars[samYr==yr,'NMb']<-2*length(indivYr[indivYr$Category=='nestling'&indivYr$Sex==1,1])
samplePars[samYr==yr,'NFb']<-2*length(indivYr[indivYr$Category=='nestling'&indivYr$Sex==2,1])
samplePars[samYr==yr,'Nt']<- samplePars[samYr==yr,'NFb'] + samplePars[samYr==yr,'NMb'] + samplePars[samYr==yr,'NFi'] + 	samplePars[samYr==yr,'NMi'] + samplePars[samYr==yr,'NMs'] +  samplePars[samYr==yr,'NFs']
#proportion of chromosomes each yr in each category
samplePars[samYr==yr,'propMS']<-samplePars[samYr==yr,'NMs']/samplePars[samYr==yr,'Nt']
samplePars[samYr==yr,'propFS']<-samplePars[samYr==yr,'NFs']/samplePars[samYr==yr,'Nt']
samplePars[samYr==yr,'propMI']<-samplePars[samYr==yr,'NMi']/samplePars[samYr==yr,'Nt']
samplePars[samYr==yr,'propFI']<-samplePars[samYr==yr,'NFi']/samplePars[samYr==yr,'Nt']
samplePars[samYr==yr,'propMB']<-samplePars[samYr==yr,'NMb']/samplePars[samYr==yr,'Nt']
samplePars[samYr==yr,'propFB']<-samplePars[samYr==yr,'NFb']/samplePars[samYr==yr,'Nt']
}
####sim unchanging parameters####
pedinfo <- ped_Ageno[,1:4]
colnames(pedinfo) <- c( "USFWS", "Dad", "Mom", "Sex")
#add sex data to indivlist_sim - can't use indivlistgeno for this as we need to include ungenotyped birds
indivlist_sim <- merge(simindivFIXmin2obs[,1:6],pedinfo[,c(1,4)],by='USFWS')
#sort indivlist_sim
indivlist_sim <- indivlist_sim[order(indivlist_sim$Year),]
#get unique indivs
simindivgeno<-indivlist_sim[!duplicated(indivlist_sim$USFWS),]
colnames(simindivgeno) <- c("Indiv", "Year", "Category", "Genotyped", "Mom", "Dad", "Sex")
library(plyr)
library(tidyr)
library(foreach)
library(dplyr)
library(doParallel)
library(data.table)
`%notin%` <- Negate(`%in%`)
####get input files###
#list of indiv in each category each year
load("simindivFIXmin2obs.rdata")
####get input files###
#list of indiv in each category each year
load("working_files/simindivFIXmin2obs.rdata")
setwd('~/Documents/GitHub/ZDropping')
####get input files###
#list of indiv in each category each year
load("working_files/simindivFIXmin2obs.rdata")
setwd('~/Documents/GitHub/ZDropping/alleleFreqModel')
####get input files###
#list of indiv in each category each year
load("working_files/simindivFIXmin2obs.rdata")
genotyped_official <- unique(simindivFIXmin2obs$USFWS[simindivFIXmin2obs$genotyped == "Y"])
load("FSJpedgeno_A.rdata")
load("working_files/FSJpedgeno_A.rdata")
ped_AgenoT <- ped_Ageno[ped_Ageno$V2 %in% genotyped_official,]
indivlist <- merge(simindivFIXmin2obs,ped_AgenoT[c(1,4)],by.x="USFWS",by.y="V2")
names(indivlist)<-c('Indiv','Year','Category','Genotyped','Mom','Dad','Sex')
indivlistgeno <- merge(indivlist,ped_AgenoT[,c(1,5:length(ped_AgenoT))],by.x="Indiv",by.y="V2")
####estimate values that are constant across SNPs####
samplePars<-data.frame(Year=c(1998:2013),stringsAsFactors=FALSE)
samplePars[samplePars$Year==1998,'Nt']<- 2*(length(indivlist[indivlist$Year==1998&indivlist$Category=='survivor'&indivlist$Sex==1,1]) + length(indivlist[indivlist$Year==1998&indivlist$Category=='survivor'&indivlist$Sex==2,1]) + length(indivlist[indivlist$Year==1998&indivlist$Category=='immigrant'&indivlist$Sex==1,1]) +
length(indivlist[indivlist$Year==1998&indivlist$Category=='immigrant'&indivlist$Sex==2,1]) + length(indivlist[indivlist$Year==1998&indivlist$Category=='nestling'&indivlist$Sex==2,1]) + length(indivlist[indivlist$Year==1998&indivlist$Category=='nestling'&indivlist$Sex==1,1]))
for(yr in c(1999:2013)){
samYr<-samplePars$Year
indivYr<-indivlist[which(indivlist$Year==yr),]
#number of inds each yr in each category (total, survivors, immigrants, nestlings of each sex)
samplePars[samYr==yr,'NMs']<-2*length(indivYr[indivYr$Category=='survivor'&indivYr$Sex==1,1])
samplePars[samYr==yr,'NFs']<-2*length(indivYr[indivYr$Category=='survivor'&indivYr$Sex==2,1])
samplePars[samYr==yr,'NMi']<-2*length(indivYr[indivYr$Category=='immigrant'&indivYr$Sex==1,1])
samplePars[samYr==yr,'NFi']<-2*length(indivYr[indivYr$Category=='immigrant'&indivYr$Sex==2,1])
samplePars[samYr==yr,'NMb']<-2*length(indivYr[indivYr$Category=='nestling'&indivYr$Sex==1,1])
samplePars[samYr==yr,'NFb']<-2*length(indivYr[indivYr$Category=='nestling'&indivYr$Sex==2,1])
samplePars[samYr==yr,'Nt']<- samplePars[samYr==yr,'NFb'] + samplePars[samYr==yr,'NMb'] + samplePars[samYr==yr,'NFi'] + 	samplePars[samYr==yr,'NMi'] + samplePars[samYr==yr,'NMs'] +  samplePars[samYr==yr,'NFs']
#proportion of chromosomes each yr in each category
samplePars[samYr==yr,'propMS']<-samplePars[samYr==yr,'NMs']/samplePars[samYr==yr,'Nt']
samplePars[samYr==yr,'propFS']<-samplePars[samYr==yr,'NFs']/samplePars[samYr==yr,'Nt']
samplePars[samYr==yr,'propMI']<-samplePars[samYr==yr,'NMi']/samplePars[samYr==yr,'Nt']
samplePars[samYr==yr,'propFI']<-samplePars[samYr==yr,'NFi']/samplePars[samYr==yr,'Nt']
samplePars[samYr==yr,'propMB']<-samplePars[samYr==yr,'NMb']/samplePars[samYr==yr,'Nt']
samplePars[samYr==yr,'propFB']<-samplePars[samYr==yr,'NFb']/samplePars[samYr==yr,'Nt']
}
pedinfo <- ped_Ageno[,1:4]
colnames(pedinfo) <- c( "USFWS", "Dad", "Mom", "Sex")
#add sex data to indivlist_sim - can't use indivlistgeno for this as we need to include ungenotyped birds
indivlist_sim <- merge(simindivFIXmin2obs[,1:6],pedinfo[,c(1,4)],by='USFWS')
#sort indivlist_sim
indivlist_sim <- indivlist_sim[order(indivlist_sim$Year),]
#get unique indivs
simindivgeno<-indivlist_sim[!duplicated(indivlist_sim$USFWS),]
colnames(simindivgeno) <- c("Indiv", "Year", "Category", "Genotyped", "Mom", "Dad", "Sex")
unsexed_indivs <- simindivgeno$Indiv[simindivgeno$Sex==0]
simulated_sexes <- sample(x = c(1,2), size = length(unsexed_indivs), prob = c(0.5,0.5), replace = TRUE)
simulated_sexes
#add assigned sexes of unsexed birds back to indivlist_sim
simindivgeno <- fread('working_files/FSJ_sex_data_real_and_simulated_20201015.csv')
simindivgeno
simindivgeno
#get unique indivs
simindivgeno<-indivlist_sim[!duplicated(indivlist_sim$USFWS),]
simindivgeno
indivlist_sim
simindivgeno
simulated_sexes
#add assigned sexes of unsexed birds back to indivlist_sim
simulated_sexes <- fread('working_files/FSJ_sex_data_real_and_simulated_20201015.csv')
simulated_sexes
colnames(simulated_sexes) <- c("Indiv", "Sex")
simindivgeno <- left_join(simindivgeno,simulated_sexes,by=c("USFWS"="Indiv"))
simindivgeno
colnames(simindivgeno) <- c("Indiv", "Year", "Category", "Genotyped", "Mom", "Dad", "og_Sex")
#get unique indivs
simindivgeno<-indivlist_sim[!duplicated(indivlist_sim$USFWS),]
colnames(simindivgeno) <- c("Indiv", "Year", "Category", "Genotyped", "Mom", "Dad", "og_Sex")
simindivgeno <- left_join(simindivgeno,simulated_sexes,by=c("USFWS"="Indiv"))
simindivgeno
#get unique indivs
simindivgeno<-indivlist_sim[!duplicated(indivlist_sim$USFWS),]
colnames(simindivgeno) <- c("Indiv", "Year", "Category", "Genotyped", "Mom", "Dad", "og_Sex")
left_join(simindivgeno,simulated_sexes,by=c("Indiv"="Indiv"))
simindivgeno <- left_join(simindivgeno,simulated_sexes,by=c("Indiv"="Indiv"))
setwd('~/Documents/GitHub/ZDropping/alleleFreqModel')
library(plyr)
library(tidyr)
library(foreach)
library(dplyr)
library(doParallel)
library(data.table)
`%notin%` <- Negate(`%in%`)
####get input files###
#list of indiv in each category each year
load("working_files/simindivFIXmin2obs.rdata")
genotyped_official <- unique(simindivFIXmin2obs$USFWS[simindivFIXmin2obs$genotyped == "Y"])
load("working_files/FSJpedgeno_A.rdata")
ped_AgenoT <- ped_Ageno[ped_Ageno$V2 %in% genotyped_official,]
indivlist <- merge(simindivFIXmin2obs,ped_AgenoT[c(1,4)],by.x="USFWS",by.y="V2")
names(indivlist)<-c('Indiv','Year','Category','Genotyped','Mom','Dad','Sex')
indivlistgeno <- merge(indivlist,ped_AgenoT[,c(1,5:length(ped_AgenoT))],by.x="Indiv",by.y="V2")
####estimate values that are constant across SNPs####
samplePars<-data.frame(Year=c(1998:2013),stringsAsFactors=FALSE)
samplePars[samplePars$Year==1998,'Nt']<- 2*(length(indivlist[indivlist$Year==1998&indivlist$Category=='survivor'&indivlist$Sex==1,1]) + length(indivlist[indivlist$Year==1998&indivlist$Category=='survivor'&indivlist$Sex==2,1]) + length(indivlist[indivlist$Year==1998&indivlist$Category=='immigrant'&indivlist$Sex==1,1]) +
length(indivlist[indivlist$Year==1998&indivlist$Category=='immigrant'&indivlist$Sex==2,1]) + length(indivlist[indivlist$Year==1998&indivlist$Category=='nestling'&indivlist$Sex==2,1]) + length(indivlist[indivlist$Year==1998&indivlist$Category=='nestling'&indivlist$Sex==1,1]))
for(yr in c(1999:2013)){
samYr<-samplePars$Year
indivYr<-indivlist[which(indivlist$Year==yr),]
#number of inds each yr in each category (total, survivors, immigrants, nestlings of each sex)
samplePars[samYr==yr,'NMs']<-2*length(indivYr[indivYr$Category=='survivor'&indivYr$Sex==1,1])
samplePars[samYr==yr,'NFs']<-2*length(indivYr[indivYr$Category=='survivor'&indivYr$Sex==2,1])
samplePars[samYr==yr,'NMi']<-2*length(indivYr[indivYr$Category=='immigrant'&indivYr$Sex==1,1])
samplePars[samYr==yr,'NFi']<-2*length(indivYr[indivYr$Category=='immigrant'&indivYr$Sex==2,1])
samplePars[samYr==yr,'NMb']<-2*length(indivYr[indivYr$Category=='nestling'&indivYr$Sex==1,1])
samplePars[samYr==yr,'NFb']<-2*length(indivYr[indivYr$Category=='nestling'&indivYr$Sex==2,1])
samplePars[samYr==yr,'Nt']<- samplePars[samYr==yr,'NFb'] + samplePars[samYr==yr,'NMb'] + samplePars[samYr==yr,'NFi'] + 	samplePars[samYr==yr,'NMi'] + samplePars[samYr==yr,'NMs'] +  samplePars[samYr==yr,'NFs']
#proportion of chromosomes each yr in each category
samplePars[samYr==yr,'propMS']<-samplePars[samYr==yr,'NMs']/samplePars[samYr==yr,'Nt']
samplePars[samYr==yr,'propFS']<-samplePars[samYr==yr,'NFs']/samplePars[samYr==yr,'Nt']
samplePars[samYr==yr,'propMI']<-samplePars[samYr==yr,'NMi']/samplePars[samYr==yr,'Nt']
samplePars[samYr==yr,'propFI']<-samplePars[samYr==yr,'NFi']/samplePars[samYr==yr,'Nt']
samplePars[samYr==yr,'propMB']<-samplePars[samYr==yr,'NMb']/samplePars[samYr==yr,'Nt']
samplePars[samYr==yr,'propFB']<-samplePars[samYr==yr,'NFb']/samplePars[samYr==yr,'Nt']
}
pedinfo <- ped_Ageno[,1:4]
colnames(pedinfo) <- c( "USFWS", "Dad", "Mom", "Sex")
#add sex data to indivlist_sim - can't use indivlistgeno for this as we need to include ungenotyped birds
indivlist_sim <- merge(simindivFIXmin2obs[,1:6],pedinfo[,c(1,4)],by='USFWS')
#sort indivlist_sim
indivlist_sim <- indivlist_sim[order(indivlist_sim$Year),]
#get unique indivs
simindivgeno<-indivlist_sim[!duplicated(indivlist_sim$USFWS),]
colnames(simindivgeno) <- c("Indiv", "Year", "Category", "Genotyped", "Mom", "Dad", "og_Sex")
#add assigned sexes of unsexed birds back to indivlist_sim
simulated_sexes <- fread('working_files/FSJ_sex_data_real_and_simulated_20201015.csv')
colnames(simulated_sexes) <- c("Indiv", "Sex")
simindivgeno <- left_join(simindivgeno,simulated_sexes,by=c("Indiv"="Indiv"))
#(this way, a given unsexed bird will always have the same assigned sex even if it appears multiple times in indivlist)
indivlist_sim$Sex <- simindivgeno$Sex[match(indivlist_sim$USFWS, simindivgeno$Indiv)]
#separate into moms vs dads vs nestlings
simindivgenoMoms<-
simindivgeno[(simindivgeno$Category!='nestling' | is.na(simindivgeno$Mom)) & simindivgeno$Sex==2,]
simindivgenoDads<-
simindivgeno[(simindivgeno$Category!='nestling' | is.na(simindivgeno$Mom)) & simindivgeno$Sex==1,]
simindivgenoNestlings<-
simindivgeno[simindivgeno$Category=='nestling' & !is.na(simindivgeno$Mom),]
#estimate values that vary with SNP
####start bootstrap####
markersInPedOrder <- cbind.data.frame("SNPs"=names(ped_Ageno[,-c(1:4)]),"rank"=c(1:length(ped_Ageno[,-c(1:4)])))
markersInPedOrder <- separate(markersInPedOrder, SNPs, c("SNP","one"),   sep = "_", remove = TRUE, convert = FALSE, extra = "merge", fill = "left")[,-2]
#import SNPchip SNP position information
chip <- fread('working_files/FSJbeadchipSeqLocFSJgenomeV2_06May2021.txt',fill=TRUE,header=TRUE)
#which scaffolds to keep
keeps <- c(
"ScYP8k313HRSCAF58ch1"   , "ScYP8k312HRSCAF54ch1A"   , "ScYP8k3629HRSCAF770ch2" ,  "ScYP8k3866HRSCAF1020ch3" , "ScYP8k311HRSCAF50ch4","ScYP8k314HRSCAF84ch4A"  ,
"ScYP8k39HRSCAF32ch6" , "ScYP8k35HRSCAF18ch5"     , "ScYP8k34HRSCAF13ch7"   , "ScYP8k31HRSCAF1ch8"   ,  "ScYP8k33HRSCAF8ch9" , "ScYP8k32HRSCAF3ch10"   ,
"ScYP8k3869HRSCAF1023ch11",  "ScYP8k3870HRSCAF1029ch12",  "ScYP8k3302HRSCAF431ch13"  , "ScYP8k3651HRSCAF793ch14" ,  "ScYP8k3864HRSCAF1010ch15",
"ScYP8k37HRSCAF29ch17"   , "ScYP8k38HRSCAF31ch18"  ,  "ScYP8k36HRSCAF25ch19" ,"ScYP8k3865HRSCAF1011ch20",   "ScYP8k369HRSCAF175ch21" ,   "ScYP8k369HRSCAF175ch22"  ,
"ScYP8k369HRSCAF175ch23",  "ScYP8k369HRSCAF175ch24" , "ScYP8k369HRSCAF175ch25" ,"ScYP8k369HRSCAF175ch26", "ScYP8k369HRSCAF175ch27"  , "ScYP8k369HRSCAF175ch28")
chip_A <- chip[chip$NewScaff %in% keeps,] # remove Z & unplaced micros
chip_A_tally <- chip_A %>% group_by(NewScaff) %>% tally()
#set window size in b.p.
w_size = 3400000
nloci<- round(100000*(w_size/1000000000)) #set sim loci number relative to window size; regular sim nloci / genome size in mb
#Z SNP info
ZSNPS <- fread('FSJfullPedFiltDogFINAL12July2016finalSexNumMAF05.map')
#Z SNP info
ZSNPS <- fread('working_files/FSJfullPedFiltDogFINAL12July2016finalSexNumMAF05.map')
ZSNPS <- ZSNPS[ZSNPS$V1 == 39 ,]
chip <- fread('working_files/FSJbeadchipSeqLocFSJgenomeV2_06May2021.txt',fill=TRUE,header=TRUE)
ZSNPS
chip
seq(1:length(ZSNPS$V1))
ZSNPS$num <- seq(1:length(ZSNPS$V1))
ZSNPS <- separate(ZSNPS, SNPname,
c("scaff","pos"), sep = "p",
remove = TRUE, convert = FALSE, extra = "merge", fill = "left")
ZSNPS
ZSNPS <- separate(ZSNPS, V2,
c("scaff","pos"), sep = "p",
remove = TRUE, convert = FALSE, extra = "merge", fill = "left")
chip
chip <- separate(chip, SNPname,
c("scaff","pos"), sep = "p",
remove = TRUE, convert = FALSE, extra = "merge", fill = "left")
left_join(ZSNPS,chip,by=c("pos"=
"pos"))
#Z SNP info
ZSNPS <- fread('working_files/FSJfullPedFiltDogFINAL12July2016finalSexNumMAF05.map')
#ZSNPS <- ZSNPS[ZSNPS$V1 == 39 ,]
ZSNPS$num <- seq(1:length(ZSNPS$V1))
chip <- fread('working_files/FSJbeadchipSeqLocFSJgenomeV2_06May2021.txt',fill=TRUE,header=TRUE)
left_join(ZSNPS,chip,by=c("V2"=
"SNPname"))
Z_chip <- left_join(ZSNPS,chip,by=c("V2"=   "SNPname"))
View(Z_chip)
#Z SNP info
ZSNPS <- fread('working_files/FSJfullPedFiltDogFINAL12July2016finalSexNumMAF05.map')
ZSNPS <- ZSNPS[ZSNPS$V1 == 39 ,]
ZSNPS$num <- seq(1:length(ZSNPS$V1))
chip <- fread('working_files/FSJbeadchipSeqLocFSJgenomeV2_06May2021.txt',fill=TRUE,header=TRUE)
Z_chip <- left_join(ZSNPS,chip,by=c("V2"=   "SNPname"))
setwd('~/Documents/GitHub/ZDropping/alleleFreqModel')
library(plyr)
library(tidyr)
library(foreach)
library(dplyr)
library(doParallel)
library(data.table)
`%notin%` <- Negate(`%in%`)
`%ni%` <- Negate(`%in%`)
####get input files####
#list of indiv in each Category each year
load("working_files/simindivFIXmin2obs.rdata")
names(simindivFIXmin2obs) <- c('Year','Indiv','Category','Genotyped','Mom','Dad')
load("working_files/indivlistgenoZ.rdata")
names(indivlistgeno)[c(1,3,4)]<-c('Indiv','Category','Genotyped')
#load("working_files/indivlistgenoZ.rdata")
fread('working_files/FSJpedgeno_Zsexlinked.ped')
fread('working_files/FSJpedgeno_Zsexlinked.ped')[,-1]
load("working_files/indivlistgenoZ.rdata")
View(indivlistgeno)
names(indivlistgeno)[c(1,3,4)]<-c('Indiv','Category','Genotyped')
#Z SNP info
ZSNPS <- fread('working_files/FSJfullPedFiltDogFINAL12July2016finalSexNumMAF05.map')
ZSNPS <- ZSNPS[ZSNPS$V1 == 39 ,]
ZSNPS$num <- seq(1:length(ZSNPS$V1))
names(indivlistgeno)[c(8:length(indivlistgeno))]<-ZSNPS$V2
indivlist <- indivlistgeno[c(1:7)]
names(indivlist)<-c('Indiv','Year','Category','Genotyped','Mom','Dad','Sex')
####estimate values that are constant across SNPs###
samplePars<-data.frame(Year=c(1998:2013),stringsAsFactors=FALSE)
samplePars[samplePars$Year==1998,'Nt']<- 2*length(indivlist[indivlist$Year==1998&indivlist$Category=='survivor'&indivlist$Sex==1,1]) + length(indivlist[indivlist$Year==1998&indivlist$Category=='survivor'&indivlist$Sex==2,1]) + 2*length(indivlist[indivlist$Year==1998&indivlist$Category=='immigrant'&indivlist$Sex==1,1]) +
2*length(indivlist[indivlist$Year==1998&indivlist$Category=='immigrant'&indivlist$Sex==2,1]) + length(indivlist[indivlist$Year==1998&indivlist$Category=='nestling'&indivlist$Sex==2,1]) + 2*length(indivlist[indivlist$Year==1998&indivlist$Category=='nestling'&indivlist$Sex==1,1])
for(yr in c(1999:2013)){
samYr<-samplePars$Year
indivYr<-indivlist[which(indivlist$Year==yr),]
#number of inds each yr in each Category (total, survivors, immigrants, nestlings of each sex)
samplePars[samYr==yr,'NMs']<-2*length(indivYr[indivYr$Category=='survivor'&indivYr$Sex==1,1])
samplePars[samYr==yr,'NFs']<-length(indivYr[indivYr$Category=='survivor'&indivYr$Sex==2,1])
samplePars[samYr==yr,'NMi']<-2*length(indivYr[indivYr$Category=='immigrant'&indivYr$Sex==1,1])
samplePars[samYr==yr,'NFi']<-length(indivYr[indivYr$Category=='immigrant'&indivYr$Sex==2,1])
samplePars[samYr==yr,'NMb']<-2*length(indivYr[indivYr$Category=='nestling'&indivYr$Sex==1,1])
samplePars[samYr==yr,'NFb']<-length(indivYr[indivYr$Category=='nestling'&indivYr$Sex==2,1])
samplePars[samYr==yr,'Nt']<- samplePars[samYr==yr,'NFb'] + samplePars[samYr==yr,'NMb'] + samplePars[samYr==yr,'NFi'] + 	samplePars[samYr==yr,'NMi'] + samplePars[samYr==yr,'NMs'] +  samplePars[samYr==yr,'NFs']
#proportion of chromosomes each yr in each Category
samplePars[samYr==yr,'propMS']<-samplePars[samYr==yr,'NMs']/samplePars[samYr==yr,'Nt']
samplePars[samYr==yr,'propFS']<-samplePars[samYr==yr,'NFs']/samplePars[samYr==yr,'Nt']
samplePars[samYr==yr,'propMI']<-samplePars[samYr==yr,'NMi']/samplePars[samYr==yr,'Nt']
samplePars[samYr==yr,'propFI']<-samplePars[samYr==yr,'NFi']/samplePars[samYr==yr,'Nt']
samplePars[samYr==yr,'propMB']<-samplePars[samYr==yr,'NMb']/samplePars[samYr==yr,'Nt']
samplePars[samYr==yr,'propFB']<-samplePars[samYr==yr,'NFb']/samplePars[samYr==yr,'Nt']
}
ped<-read.table('working_files/FSJpedgeno_Zsexlinked.ped',header=FALSE,sep=' ',stringsAsFactors=FALSE)
pedinfo <- ped[,1:5]
colnames(pedinfo) <- c("Family", "Indiv", "Dad", "Mom", "Sex")
indivlist_sim <- merge(simindivFIXmin2obs[,1:6],pedinfo[,c(2,5)],by='Indiv')
#sort indivlist_sim
indivlist_sim <- indivlist_sim[order(indivlist_sim$Year),]
#get unique indivs
simindivgeno<-indivlist_sim[!duplicated(indivlist_sim$Indiv),]
colnames(simindivgeno) <- c("Indiv", "Year", "Category", "Genotyped", "Mom", "Dad", "og_Sex")
#check for unsexed indivs & assign them a sex
#unsexed_indivs <- simindivgeno$Indiv[simindivgeno$Sex==0]
#simulated_sexes <- sample(x = c(1,2), size = length(unsexed_indivs), prob = c(0.5,0.5), replace = TRUE)
#simindivgeno$Sex[simindivgeno$Sex==0] <- simulated_sexes
simulated_sexes <- fread('working_files/FSJ_sex_data_real_and_simulated_20201015.csv')
colnames(simulated_sexes) <- c("Indiv", "Sex")
simindivgeno <- left_join(simindivgeno,simulated_sexes,by=c("Indiv"="Indiv"))
#add assigned sexes of unsexed birds back to indivlist_sim
#(this way, a given unsexed bird will always have the same assigned sex even if it appears multiple times in indivlist)
indivlist_sim$Sex <- simindivgeno$Sex[match(indivlist_sim$Indiv, simindivgeno$Indiv)]
#separate into moms vs dads vs nestlings
simindivgenoMoms<-
simindivgeno[(simindivgeno$Category!='nestling' | is.na(simindivgeno$Mom)) & simindivgeno$Sex==2,]
simindivgenoDads<-
simindivgeno[(simindivgeno$Category!='nestling' | is.na(simindivgeno$Mom)) & simindivgeno$Sex==1,]
simindivgenoNestlings<-
simindivgeno[simindivgeno$Category=='nestling' & !is.na(simindivgeno$Mom),]
#estimate values that vary with SNP
####start bootstrap####
markersInPedOrder <- cbind.data.frame("SNPs"=names(indivlistgeno[,-c(1:7)]),"rank"=c(1:length(indivlistgeno[,-c(1:7)])))
markersInPedOrder
chip <- fread('working_files/FSJbeadchipSeqLocFSJgenomeV2_06May2021.txt',fill=TRUE,header=TRUE)
chip_Z <- chip[chip$NewScaff == "ScYP8k310HRSCAF43chZ" ,] # only Z &
Z_size <- 75605511
w_size = 3400000
nloci<- round(100000*(w_size/Z_size)) #set sim loci number relative to window size; regular sim nloci / genome size in mb
win_global = 0
for(win in seq(from=0,to=max(chip_Z$SNPpos,na.rm=T),by = w_size)){
if(win+w_size<Z_size){
cat( ((win/w_size) + win_global)," ",win," ",Z_size,"\n")
chip_Z$bootstrap[chip_Z$SNPpos > win & chip_Z$SNPpos <= (win+w_size) ] <- (win/w_size) + win_global
}else{
cat( ((win/w_size) + win_global)," ",win," ",Z_size," skipped\n")
}
}
win_global <- (win/w_size) + win_global #need to increase window number with each loop across chromosomes
chip_Z_tally <- chip_Z %>% group_by(bootstrap) %>% tally()
markersInPedOrder_chip_Z <- left_join(markersInPedOrder,chip_Z,by=c("SNPs"="SNPname"))
markersInPedOrder_chip_Z
write.table(markersInPedOrder_chip_Z,
file = "markersInPedOrder_chip_Z.txt", append = T, quote = FALSE, sep = "\t",
eol = "\n", na = "NA", dec = ".", row.names = FALSE,
col.names = TRUE, qmethod = c("escape", "double"))
setwd('~/Documents/GitHub/ZDropping/alleleFreqModel')
#get input files: fixed list of indiv in each Category each year
load("working_files/simindivFIXmin2obs.rdata")
#get sex from pedigree
ped<-read.table('FSJpedgeno_Zsexlinked.ped',header=FALSE,sep=' ',stringsAsFactors=FALSE)
#get sex from pedigree
ped<-read.table('working_files/FSJpedgeno_Zsexlinked.ped',header=FALSE,sep=' ',stringsAsFactors=FALSE)
pedinfo <- ped[,1:5]
colnames(pedinfo) <- c("Family", "USFWS", "Dad", "Mom", "Sex")
#get sample allele freq for simulations, from _sample script
load(sampleVar,file=paste("working_files/intermediate_files/sampleVar_Z.rdata",sep=''))
library(plyr)
library(foreach)
library(doParallel)
####set variables and make/import tables####
#number of SNPs to simulate
nloci<-100000
#get date script is run
today<-format(Sys.Date(),format="%d%b%Y")
#get input files: fixed list of indiv in each Category each year
load("working_files/simindivFIXmin2obs.rdata")
#get sex from pedigree
ped<-read.table('working_files/FSJpedgeno_Zsexlinked.ped',header=FALSE,sep=' ',stringsAsFactors=FALSE)
pedinfo <- ped[,1:5]
colnames(pedinfo) <- c("Family", "USFWS", "Dad", "Mom", "Sex")
#get sample allele freq for simulations, from _sample script
load(file="working_files/intermediate_files/sampleVar_Z.rdata")
