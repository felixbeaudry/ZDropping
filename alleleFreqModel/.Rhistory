sampleFreq[SNPyr==year & SNPcat=='nFs',snp]
sampleFreq[SNPyr==year & SNPcat=='nMi',snp]<-
2*(sum(!is.na(genoYr[genoYr$Category=='immigrant'&genoYr$Sex==1,snp])))
sampleFreq[SNPyr==year & SNPcat=='nFi',snp]<-
2*(sum(!is.na(genoYr[genoYr$Category=='immigrant'&genoYr$Sex==2,snp])))
sampleFreq[SNPyr==year & SNPcat=='xMi',snp]<-
ifelse(sampleFreq[SNPyr==year & SNPcat=='nMi',snp]==0,0,
sum(genoYr[genoYr$Category=='immigrant'&genoYr$Sex==1,snp],na.rm=TRUE)/
sampleFreq[SNPyr==year & SNPcat=='nMi',snp])
sampleFreq[SNPyr==year & SNPcat=='xFi',snp]<-
ifelse(sampleFreq[SNPyr==year & SNPcat=='nFi',snp]==0,0,
sum(genoYr[genoYr$Category=='immigrant'&genoYr$Sex==2,snp],na.rm=TRUE)/
sampleFreq[SNPyr==year & SNPcat=='nFi',snp])
sampleFreq[SNPyr==year & SNPcat=='nMb',snp]<-
2*(sum(!is.na(genoYr[genoYr$Category=='nestling'&genoYr$Sex==1,snp])))
sampleFreq[SNPyr==year & SNPcat=='nFb',snp]<-
2*(sum(!is.na(genoYr[genoYr$Category=='nestling'&genoYr$Sex==2,snp])))
sampleFreq[SNPyr==year & SNPcat=='xMb',snp]<-
sum(genoYr[genoYr$Category=='nestling'&genoYr$Sex==1,snp],na.rm=TRUE)/
sampleFreq[SNPyr==year & SNPcat=='nMb',snp]
sampleFreq[SNPyr==year & SNPcat=='xFb',snp]<-
sum(genoYr[genoYr$Category=='nestling'&genoYr$Sex==2,snp],na.rm=TRUE)/
sampleFreq[SNPyr==year & SNPcat=='nFb',snp]
}
}
#calculate allele freq differences between each category and the year before
for(year in c(1999:2013)){
#allele freq differences
sampleFreq[SNPyr==year & SNPcat=='xt1-xt',c(3:length(sampleFreq))]<-
sampleFreq[SNPyr==year & SNPcat=='xt',c(3:length(sampleFreq))]-
sampleFreq[SNPyr==(year-1) & SNPcat=='xt',c(3:length(sampleFreq))]
sampleFreq[SNPyr==year & SNPcat=='xt1-xt',c(3:length(sampleFreq))]<-
sampleFreq[SNPyr==year & SNPcat=='xt',c(3:length(sampleFreq))]-
sampleFreq[SNPyr==(year-1) & SNPcat=='xt',c(3:length(sampleFreq))]
sampleFreq[SNPyr==year & SNPcat=='xMs-xt',c(3:length(sampleFreq))]<-
sampleFreq[SNPyr==year & SNPcat=='xMs',c(3:length(sampleFreq))]-
sampleFreq[SNPyr==(year-1) & SNPcat=='xt',c(3:length(sampleFreq))]
sampleFreq[SNPyr==year & SNPcat=='xFs-xt',c(3:length(sampleFreq))]<-
sampleFreq[SNPyr==year & SNPcat=='xFs',c(3:length(sampleFreq))]-
sampleFreq[SNPyr==(year-1) & SNPcat=='xt',c(3:length(sampleFreq))]
sampleFreq[SNPyr==year & SNPcat=='xMi-xt',c(3:length(sampleFreq))]<-
sampleFreq[SNPyr==year & SNPcat=='xMi',c(3:length(sampleFreq))]-
sampleFreq[SNPyr==(year-1) & SNPcat=='xt',c(3:length(sampleFreq))]
sampleFreq[SNPyr==year & SNPcat=='xFi-xt',c(3:length(sampleFreq))]<-
sampleFreq[SNPyr==year & SNPcat=='xFi',c(3:length(sampleFreq))]-
sampleFreq[SNPyr==(year-1) & SNPcat=='xt',c(3:length(sampleFreq))]
sampleFreq[SNPyr==year & SNPcat=='xMb-xt',c(3:length(sampleFreq))]<-
sampleFreq[SNPyr==year & SNPcat=='xMb',c(3:length(sampleFreq))]-
sampleFreq[SNPyr==(year-1) & SNPcat=='xt',c(3:length(sampleFreq))]
sampleFreq[SNPyr==year & SNPcat=='xFb-xt',c(3:length(sampleFreq))]<-
sampleFreq[SNPyr==year & SNPcat=='xFb',c(3:length(sampleFreq))]-
sampleFreq[SNPyr==(year-1) & SNPcat=='xt',c(3:length(sampleFreq))]
}
#calculate variances and covariances
sampleVar<-data.frame(Year=rep(c(1999:2013),each=28),Category=rep(c(
'xt1-xt',
'xMs-xt','xFs-xt',
'xMi-xt','xFi-xt',
'xMb-xt','xFb-xt',
'xMsxMi','xFsxFi','xMsxMb','xFsxFb','xMixMb','xFixFb',
'xMsxFs','xMixFi','xMbxFb',
'xMsxFi','xMsxFb','xMixFb',
'xFsxMi','xFsxMb','xFixMb',
'xMfam','xFfam','xMmend','xFmend','xMfam-xt','xFfam-xt'),15),stringsAsFactors=FALSE)
varYr<-sampleVar$Year
snp
# number of genotyped chromosomes
sampleFreq[SNPyr==1998 & SNPcat=='nt',snp]<-
2*(sum(!is.na(indivlistgeno[igYear==1998&indivlistgeno$Sex==1,snp])) +
sum(!is.na(indivlistgeno[igYear==1998&indivlistgeno$Sex==2,snp])))
sampleFreq[SNPyr==1998 & SNPcat=='xt',snp]<-
sum(indivlistgeno[igYear==1998,snp],na.rm=TRUE)/
sampleFreq[SNPyr==1998 & SNPcat=='nt',snp]
for(year in c(1999:2013)){
genoYr<-indivlistgeno[igYear==year,]
sampleFreq[SNPyr==year & SNPcat=='nt',snp]<-
2*(sum(!is.na(genoYr[genoYr$Sex==1,snp])) + sum(!is.na(genoYr[genoYr$Sex==2,snp])))
sampleFreq[SNPyr==year & SNPcat=='xt',snp]<-sum(genoYr[,snp],na.rm=TRUE)/
sampleFreq[SNPyr==year & SNPcat=='nt',snp]
sampleFreq[SNPyr==year & SNPcat=='nMs',snp]<-
2*(sum(!is.na(genoYr[genoYr$Category=='survivor'&genoYr$Sex==1,snp])))
sampleFreq[SNPyr==year & SNPcat=='nFs',snp]<-
2*(sum(!is.na(genoYr[genoYr$Category=='survivor'&genoYr$Sex==2,snp])))
sampleFreq[SNPyr==year & SNPcat=='xMs',snp]<-
sum(genoYr[genoYr$Category=='survivor'&genoYr$Sex==1,snp],na.rm=TRUE)/
sampleFreq[SNPyr==year & SNPcat=='nMs',snp]
sampleFreq[SNPyr==year & SNPcat=='xFs',snp]<-
sum(genoYr[genoYr$Category=='survivor'&genoYr$Sex==2,snp],na.rm=TRUE)/
sampleFreq[SNPyr==year & SNPcat=='nFs',snp]
sampleFreq[SNPyr==year & SNPcat=='nMi',snp]<-
2*(sum(!is.na(genoYr[genoYr$Category=='immigrant'&genoYr$Sex==1,snp])))
sampleFreq[SNPyr==year & SNPcat=='nFi',snp]<-
2*(sum(!is.na(genoYr[genoYr$Category=='immigrant'&genoYr$Sex==2,snp])))
sampleFreq[SNPyr==year & SNPcat=='xMi',snp]<-
ifelse(sampleFreq[SNPyr==year & SNPcat=='nMi',snp]==0,0,
sum(genoYr[genoYr$Category=='immigrant'&genoYr$Sex==1,snp],na.rm=TRUE)/
sampleFreq[SNPyr==year & SNPcat=='nMi',snp])
sampleFreq[SNPyr==year & SNPcat=='xFi',snp]<-
ifelse(sampleFreq[SNPyr==year & SNPcat=='nFi',snp]==0,0,
sum(genoYr[genoYr$Category=='immigrant'&genoYr$Sex==2,snp],na.rm=TRUE)/
sampleFreq[SNPyr==year & SNPcat=='nFi',snp])
sampleFreq[SNPyr==year & SNPcat=='nMb',snp]<-
2*(sum(!is.na(genoYr[genoYr$Category=='nestling'&genoYr$Sex==1,snp])))
sampleFreq[SNPyr==year & SNPcat=='nFb',snp]<-
2*(sum(!is.na(genoYr[genoYr$Category=='nestling'&genoYr$Sex==2,snp])))
sampleFreq[SNPyr==year & SNPcat=='xMb',snp]<-
sum(genoYr[genoYr$Category=='nestling'&genoYr$Sex==1,snp],na.rm=TRUE)/
sampleFreq[SNPyr==year & SNPcat=='nMb',snp]
sampleFreq[SNPyr==year & SNPcat=='xFb',snp]<-
sum(genoYr[genoYr$Category=='nestling'&genoYr$Sex==2,snp],na.rm=TRUE)/
sampleFreq[SNPyr==year & SNPcat=='nFb',snp]
}
for(snp in markers){
# number of genotyped chromosomes
sampleFreq[SNPyr==1998 & SNPcat=='nt',snp]<-
2*(sum(!is.na(indivlistgeno[igYear==1998&indivlistgeno$Sex==1,snp])) +
sum(!is.na(indivlistgeno[igYear==1998&indivlistgeno$Sex==2,snp])))
sampleFreq[SNPyr==1998 & SNPcat=='xt',snp]<-
sum(indivlistgeno[igYear==1998,snp],na.rm=TRUE)/
sampleFreq[SNPyr==1998 & SNPcat=='nt',snp]
for(year in c(1999:2013)){
genoYr<-indivlistgeno[igYear==year,]
sampleFreq[SNPyr==year & SNPcat=='nt',snp]<-
2*(sum(!is.na(genoYr[genoYr$Sex==1,snp])) + sum(!is.na(genoYr[genoYr$Sex==2,snp])))
sampleFreq[SNPyr==year & SNPcat=='xt',snp]<-sum(genoYr[,snp],na.rm=TRUE)/
sampleFreq[SNPyr==year & SNPcat=='nt',snp]
sampleFreq[SNPyr==year & SNPcat=='nMs',snp]<-
2*(sum(!is.na(genoYr[genoYr$Category=='survivor'&genoYr$Sex==1,snp])))
sampleFreq[SNPyr==year & SNPcat=='nFs',snp]<-
2*(sum(!is.na(genoYr[genoYr$Category=='survivor'&genoYr$Sex==2,snp])))
sampleFreq[SNPyr==year & SNPcat=='xMs',snp]<-
sum(genoYr[genoYr$Category=='survivor'&genoYr$Sex==1,snp],na.rm=TRUE)/
sampleFreq[SNPyr==year & SNPcat=='nMs',snp]
sampleFreq[SNPyr==year & SNPcat=='xFs',snp]<-
sum(genoYr[genoYr$Category=='survivor'&genoYr$Sex==2,snp],na.rm=TRUE)/
sampleFreq[SNPyr==year & SNPcat=='nFs',snp]
sampleFreq[SNPyr==year & SNPcat=='nMi',snp]<-
2*(sum(!is.na(genoYr[genoYr$Category=='immigrant'&genoYr$Sex==1,snp])))
sampleFreq[SNPyr==year & SNPcat=='nFi',snp]<-
2*(sum(!is.na(genoYr[genoYr$Category=='immigrant'&genoYr$Sex==2,snp])))
sampleFreq[SNPyr==year & SNPcat=='xMi',snp]<-
ifelse(sampleFreq[SNPyr==year & SNPcat=='nMi',snp]==0,0,
sum(genoYr[genoYr$Category=='immigrant'&genoYr$Sex==1,snp],na.rm=TRUE)/
sampleFreq[SNPyr==year & SNPcat=='nMi',snp])
sampleFreq[SNPyr==year & SNPcat=='xFi',snp]<-
ifelse(sampleFreq[SNPyr==year & SNPcat=='nFi',snp]==0,0,
sum(genoYr[genoYr$Category=='immigrant'&genoYr$Sex==2,snp],na.rm=TRUE)/
sampleFreq[SNPyr==year & SNPcat=='nFi',snp])
sampleFreq[SNPyr==year & SNPcat=='nMb',snp]<-
2*(sum(!is.na(genoYr[genoYr$Category=='nestling'&genoYr$Sex==1,snp])))
sampleFreq[SNPyr==year & SNPcat=='nFb',snp]<-
2*(sum(!is.na(genoYr[genoYr$Category=='nestling'&genoYr$Sex==2,snp])))
sampleFreq[SNPyr==year & SNPcat=='xMb',snp]<-
sum(genoYr[genoYr$Category=='nestling'&genoYr$Sex==1,snp],na.rm=TRUE)/
sampleFreq[SNPyr==year & SNPcat=='nMb',snp]
sampleFreq[SNPyr==year & SNPcat=='xFb',snp]<-
sum(genoYr[genoYr$Category=='nestling'&genoYr$Sex==2,snp],na.rm=TRUE)/
sampleFreq[SNPyr==year & SNPcat=='nFb',snp]
}
}
genoYr<-indivlistgeno[igYear==year,]
sampleFreq[SNPyr==year & SNPcat=='nt',snp]<-
2*(sum(!is.na(genoYr[genoYr$Sex==1,snp])) + sum(!is.na(genoYr[genoYr$Sex==2,snp])))
sampleFreq[SNPyr==year & SNPcat=='xt',snp]<-sum(genoYr[,snp],na.rm=TRUE)/
sampleFreq[SNPyr==year & SNPcat=='nt',snp]
genoYr
snp
library(tidyverse)
load(file='working_files/intermediate_files/indivlistgeno_Z.rdata')
frameworkSNPs <- read.table('frameworkSNPs.list')
frameworkSNPs$SNP <- paste(frameworkSNPs$V1,frameworkSNPs$V2,sep="_")
fullMap <- read.table('all.fixed.txt',fill = T)
fullMap$SNP <- paste(fullMap$V1,fullMap$V2,sep="_")
AframeworkMap <- fullMap %>% filter(V1 %in% c(39) & SNP %in% frameworkSNPs$SNP)
map<-read.table('working_files/geno.map',header=TRUE)
ASNPS <- map[map$V1 %in% c(39) ,]
ASNPS$map_pos <- seq(1,length(ASNPS$V1))
ASNPS$SNP_name <- names(indivlistgeno_Z[,-c(1:8)])
chip <- read.table('working_files/chrom.map',fill=TRUE,header=TRUE)
ASNPS_chip <- left_join(chip,AframeworkMap,by=c("SNPname"="V3"))
w_size = 5 #cM
win_global = 0
for(lg in na.omit(unique(ASNPS_chip$V1))){
#size_tmp <- sizes$V2[sizes$V1 == lg]
winSeq <- seq(from=0,to=max(ASNPS_chip$V4[ASNPS_chip$V1 == lg],na.rm=T),by = w_size)
for(win in winSeq){
if(win+w_size<=max(winSeq)){
cat(lg, ((win/w_size) + win_global)," ",win," ",max(winSeq),"\n")
ASNPS_chip$bootstrap[ASNPS_chip$V4 > win & ASNPS_chip$V4 <= (win+w_size) & ASNPS_chip$V1 == lg ] <-
(win/w_size) + win_global
}else{
cat( ((win/w_size) + win_global)," ",win," ",max(winSeq)," skipped\n")
}
}
win_global <- (win/w_size) + win_global + 1 #need to increase window number with each loop across chromosomes
}
ASNPS_ordered <- ASNPS_chip %>% filter(newSNPname != "" & NewScaff %in%  c( "ScYP8k310HRSCAF43chZ"))
ASNPS_ordered$SNPpos <- as.numeric(ASNPS_ordered$SNPpos )
ASNPS_ordered <- ASNPS_ordered[order(ASNPS_ordered$NewScaff,ASNPS_ordered$SNPpos),]
bootstrap = 0
for(scaff in unique(ASNPS_ordered$NewScaff)){
bootstrap = min(ASNPS_ordered$bootstrap[ASNPS_ordered$NewScaff == scaff])
for(snp in ASNPS_ordered$SNPname){
if(ASNPS_ordered$NewScaff[ASNPS_ordered$SNPname == snp ] == scaff){
if( !is.na(ASNPS_ordered$bootstrap[ASNPS_ordered$SNPname == snp & ASNPS_ordered$NewScaff == scaff])){
bootstrap <- ASNPS_ordered$bootstrap[ASNPS_ordered$SNPname == snp & ASNPS_ordered$NewScaff == scaff]
}
if( is.na(ASNPS_ordered$bootstrap[ASNPS_ordered$SNPname == snp & ASNPS_ordered$NewScaff == scaff])){
ASNPS_ordered$bootstrap[ASNPS_ordered$SNPname == snp & ASNPS_ordered$NewScaff == scaff] <- bootstrap
}
}
}
}
ASNPS_ordered
AframeworkMap
fullMap$SNP_name <- names(indivlistgeno_Z[,-c(1:8)])
fullMap <- read.table('all.fixed.txt',fill = T)
fullMap$SNP <- paste(fullMap$V1,fullMap$V2,sep="_")
fullMap <- fullMap %>% filter(V1 %in% c(39) )
fullMap$SNP_name <- names(indivlistgeno_Z[,-c(1:8)])
View(fullMap)
library(tidyverse)
load(file='working_files/intermediate_files/indivlistgeno_Z.rdata')
frameworkSNPs <- read.table('frameworkSNPs.list')
frameworkSNPs$SNP <- paste(frameworkSNPs$V1,frameworkSNPs$V2,sep="_")
fullMap <- read.table('all.fixed.txt',fill = T)
fullMap$SNP <- paste(fullMap$V1,fullMap$V2,sep="_")
AframeworkMap <- fullMap %>% filter(V1 %in% c(39) & SNP %in% frameworkSNPs$SNP)
map<-read.table('working_files/geno.map',header=TRUE)
ASNPS <- map[map$V1 %in% c(39) ,]
ASNPS$map_pos <- seq(1,length(ASNPS$V1))
ASNPS$SNP_name <- names(indivlistgeno_Z[,-c(1:8)])
ASNPS
ASNPS_frame <- left_join(AframeworkMap,ASNPS[,c(2,6)],by=c("V3"="V2"))
ASNPS_frame
chip <- read.table('working_files/chrom.map',fill=TRUE,header=TRUE)
ASNPS_chip <- left_join(chip,ASNPS_frame,by=c("SNPname"="V3"))
w_size = 5 #cM
win_global = 0
for(lg in na.omit(unique(ASNPS_chip$V1))){
#size_tmp <- sizes$V2[sizes$V1 == lg]
winSeq <- seq(from=0,to=max(ASNPS_chip$V4[ASNPS_chip$V1 == lg],na.rm=T),by = w_size)
for(win in winSeq){
if(win+w_size<=max(winSeq)){
cat(lg, ((win/w_size) + win_global)," ",win," ",max(winSeq),"\n")
ASNPS_chip$bootstrap[ASNPS_chip$V4 > win & ASNPS_chip$V4 <= (win+w_size) & ASNPS_chip$V1 == lg ] <-
(win/w_size) + win_global
}else{
cat( ((win/w_size) + win_global)," ",win," ",max(winSeq)," skipped\n")
}
}
win_global <- (win/w_size) + win_global + 1 #need to increase window number with each loop across chromosomes
}
ASNPS_ordered <- ASNPS_chip %>% filter(newSNPname != "" & NewScaff %in%  c( "ScYP8k310HRSCAF43chZ"))
ASNPS_ordered$SNPpos <- as.numeric(ASNPS_ordered$SNPpos )
ASNPS_ordered <- ASNPS_ordered[order(ASNPS_ordered$NewScaff,ASNPS_ordered$SNPpos),]
bootstrap = 0
for(scaff in unique(ASNPS_ordered$NewScaff)){
bootstrap = min(ASNPS_ordered$bootstrap[ASNPS_ordered$NewScaff == scaff])
for(snp in ASNPS_ordered$SNPname){
if(ASNPS_ordered$NewScaff[ASNPS_ordered$SNPname == snp ] == scaff){
if( !is.na(ASNPS_ordered$bootstrap[ASNPS_ordered$SNPname == snp & ASNPS_ordered$NewScaff == scaff])){
bootstrap <- ASNPS_ordered$bootstrap[ASNPS_ordered$SNPname == snp & ASNPS_ordered$NewScaff == scaff]
}
if( is.na(ASNPS_ordered$bootstrap[ASNPS_ordered$SNPname == snp & ASNPS_ordered$NewScaff == scaff])){
ASNPS_ordered$bootstrap[ASNPS_ordered$SNPname == snp & ASNPS_ordered$NewScaff == scaff] <- bootstrap
}
}
}
}
A_bootstrap_map <- ASNPS_ordered %>% dplyr::select(SNPname,V1,NewScaff,V4,SNPpos,bootstrap)
ASNPS_ordered
load(file='working_files/intermediate_files/indivlistgeno_Z.rdata')
frameworkSNPs <- read.table('frameworkSNPs.list')
frameworkSNPs$SNP <- paste(frameworkSNPs$V1,frameworkSNPs$V2,sep="_")
fullMap <- read.table('all.fixed.txt',fill = T)
fullMap$SNP <- paste(fullMap$V1,fullMap$V2,sep="_")
AframeworkMap <- fullMap %>% filter(V1 %in% c(39) & SNP %in% frameworkSNPs$SNP)
chip <- read.table('working_files/chrom.map',fill=TRUE,header=TRUE)
ASNPS_chip <- left_join(chip,AframeworkMap,by=c("SNPname"="V3"))
map<-read.table('working_files/geno.map',header=TRUE)
ASNPS <- map[map$V1 %in% c(39) ,]
ASNPS$map_pos <- seq(1,length(ASNPS$V1))
ASNPS$SNP_name <- names(indivlistgeno_Z[,-c(1:8)])
ASNPS_chip
chip
load(file='working_files/intermediate_files/indivlistgeno_Z.rdata')
frameworkSNPs <- read.table('frameworkSNPs.list')
frameworkSNPs$SNP <- paste(frameworkSNPs$V1,frameworkSNPs$V2,sep="_")
fullMap <- read.table('all.fixed.txt',fill = T)
fullMap$SNP <- paste(fullMap$V1,fullMap$V2,sep="_")
AframeworkMap <- fullMap %>% filter(V1 %in% c(39) & SNP %in% frameworkSNPs$SNP)
chip <- read.table('working_files/chrom.map',fill=TRUE,header=TRUE)
ASNPS_chip <- left_join(chip,AframeworkMap,by=c("SNPname"="V3"))
View(ASNPS_chip)
map<-read.table('working_files/geno.map',header=TRUE)
ASNPS <- map[map$V1 %in% c(39) ,]
ASNPS$map_pos <- seq(1,length(ASNPS$V1))
ASNPS$SNP_name <- names(indivlistgeno_Z[,-c(1:8)])
ASNPS
ASNPS_chip
ASNPS
ASNPS_chip <- left_join(ASNPS_chip,ASNPS[,c(2,6)],by=c("SNPname"="V2"))
w_size = 5 #cM
win_global = 0
for(lg in na.omit(unique(ASNPS_chip$V1))){
#size_tmp <- sizes$V2[sizes$V1 == lg]
winSeq <- seq(from=0,to=max(ASNPS_chip$V4[ASNPS_chip$V1 == lg],na.rm=T),by = w_size)
for(win in winSeq){
if(win+w_size<=max(winSeq)){
cat(lg, ((win/w_size) + win_global)," ",win," ",max(winSeq),"\n")
ASNPS_chip$bootstrap[ASNPS_chip$V4 > win & ASNPS_chip$V4 <= (win+w_size) & ASNPS_chip$V1 == lg ] <-
(win/w_size) + win_global
}else{
cat( ((win/w_size) + win_global)," ",win," ",max(winSeq)," skipped\n")
}
}
win_global <- (win/w_size) + win_global + 1 #need to increase window number with each loop across chromosomes
}
ASNPS_ordered <- ASNPS_chip %>% filter(newSNPname != "" & NewScaff %in%  c( "ScYP8k310HRSCAF43chZ"))
ASNPS_ordered$SNPpos <- as.numeric(ASNPS_ordered$SNPpos )
ASNPS_ordered <- ASNPS_ordered[order(ASNPS_ordered$NewScaff,ASNPS_ordered$SNPpos),]
bootstrap = 0
for(scaff in unique(ASNPS_ordered$NewScaff)){
bootstrap = min(ASNPS_ordered$bootstrap[ASNPS_ordered$NewScaff == scaff])
for(snp in ASNPS_ordered$SNPname){
if(ASNPS_ordered$NewScaff[ASNPS_ordered$SNPname == snp ] == scaff){
if( !is.na(ASNPS_ordered$bootstrap[ASNPS_ordered$SNPname == snp & ASNPS_ordered$NewScaff == scaff])){
bootstrap <- ASNPS_ordered$bootstrap[ASNPS_ordered$SNPname == snp & ASNPS_ordered$NewScaff == scaff]
}
if( is.na(ASNPS_ordered$bootstrap[ASNPS_ordered$SNPname == snp & ASNPS_ordered$NewScaff == scaff])){
ASNPS_ordered$bootstrap[ASNPS_ordered$SNPname == snp & ASNPS_ordered$NewScaff == scaff] <- bootstrap
}
}
}
}
A_bootstrap_map <- ASNPS_ordered %>% dplyr::select(SNP_name,V1,NewScaff,V4,SNPpos,bootstrap)
A_bootstrap_map
A_bootstrap_map <- ASNPS_ordered %>% dplyr::select(SNP_name,V1,NewScaff,V4,SNPpos,bootstrap)
names(A_bootstrap_map) <- c("SNP","linkage_group","scaff","cM","bp","bootstrap_cm")
A_bootstrap_map <- A_bootstrap_map %>% filter(!is.na(SNP))
load(file='working_files/intermediate_files/indivlistgeno_Z.rdata')
frameworkSNPs <- read.table('frameworkSNPs.list')
frameworkSNPs$SNP <- paste(frameworkSNPs$V1,frameworkSNPs$V2,sep="_")
fullMap <- read.table('all.fixed.txt',fill = T)
fullMap$SNP <- paste(fullMap$V1,fullMap$V2,sep="_")
AframeworkMap <- fullMap %>% filter(V1 %in% c(39) & SNP %in% frameworkSNPs$SNP)
chip <- read.table('working_files/chrom.map',fill=TRUE,header=TRUE)
ASNPS_chip <- left_join(chip,AframeworkMap,by=c("SNPname"="V3"))
map<-read.table('working_files/geno.map',header=TRUE)
ASNPS <- map[map$V1 %in% c(39) ,]
ASNPS$map_pos <- seq(1,length(ASNPS$V1))
ASNPS$SNP_name <- names(indivlistgeno_Z[,-c(1:8)])
ASNPS_chip <- left_join(ASNPS_chip,ASNPS[,c(2,6)],by=c("SNPname"="V2"))
w_size = 5 #cM
win_global = 0
for(lg in na.omit(unique(ASNPS_chip$V1))){
#size_tmp <- sizes$V2[sizes$V1 == lg]
winSeq <- seq(from=0,to=max(ASNPS_chip$V4[ASNPS_chip$V1 == lg],na.rm=T),by = w_size)
for(win in winSeq){
if(win+w_size<=max(winSeq)){
cat(lg, ((win/w_size) + win_global)," ",win," ",max(winSeq),"\n")
ASNPS_chip$bootstrap[ASNPS_chip$V4 > win & ASNPS_chip$V4 <= (win+w_size) & ASNPS_chip$V1 == lg ] <-
(win/w_size) + win_global
}else{
cat( ((win/w_size) + win_global)," ",win," ",max(winSeq)," skipped\n")
}
}
win_global <- (win/w_size) + win_global + 1 #need to increase window number with each loop across chromosomes
}
ASNPS_ordered <- ASNPS_chip %>% filter(newSNPname != "" & NewScaff %in%  c( "ScYP8k310HRSCAF43chZ"))
ASNPS_ordered$SNPpos <- as.numeric(ASNPS_ordered$SNPpos )
ASNPS_ordered <- ASNPS_ordered[order(ASNPS_ordered$NewScaff,ASNPS_ordered$SNPpos),]
bootstrap = 0
for(scaff in unique(ASNPS_ordered$NewScaff)){
bootstrap = min(ASNPS_ordered$bootstrap[ASNPS_ordered$NewScaff == scaff])
for(snp in ASNPS_ordered$SNPname){
if(ASNPS_ordered$NewScaff[ASNPS_ordered$SNPname == snp ] == scaff){
if( !is.na(ASNPS_ordered$bootstrap[ASNPS_ordered$SNPname == snp & ASNPS_ordered$NewScaff == scaff])){
bootstrap <- ASNPS_ordered$bootstrap[ASNPS_ordered$SNPname == snp & ASNPS_ordered$NewScaff == scaff]
}
if( is.na(ASNPS_ordered$bootstrap[ASNPS_ordered$SNPname == snp & ASNPS_ordered$NewScaff == scaff])){
ASNPS_ordered$bootstrap[ASNPS_ordered$SNPname == snp & ASNPS_ordered$NewScaff == scaff] <- bootstrap
}
}
}
}
A_bootstrap_map <- ASNPS_ordered %>% dplyr::select(SNP_name,V1,NewScaff,V4,SNPpos,bootstrap)
names(A_bootstrap_map) <- c("SNP","linkage_group","scaff","cM","bp","bootstrap_cm")
A_bootstrap_map <- A_bootstrap_map %>% filter(!is.na(SNP))
sizes <- read.table('working_files/FSJ.chrom.sizes')
A_bootstrap_ordered <- A_bootstrap_map[order(A_bootstrap_map$scaff,A_bootstrap_map$bp),]
w_size = 3300000
win_global = 0
for(scaf in unique(A_bootstrap_ordered$scaff)){
size_tmp <- sizes$V2[sizes$V1 == scaf]
for(win in seq(from=0,to=max(A_bootstrap_ordered$bp[A_bootstrap_ordered$scaff == scaf],na.rm=T),by = w_size)){
if(win+w_size<size_tmp){
cat(scaf, ((win/w_size) + win_global)," ",win," ",size_tmp,"\n")
A_bootstrap_ordered$bootstrap_bp[A_bootstrap_ordered$bp > win & A_bootstrap_ordered$bp <= (win+w_size) & A_bootstrap_ordered$scaff == scaf] <- (win/w_size) + win_global
}else{
cat( ((win/w_size) + win_global)," ",win," ",size_tmp," skipped\n")
}
}
win_global <- (win/w_size) + win_global + 1 #need to increase window number with each loop across chromosomes
}
badBoots_cm <- A_bootstrap_ordered %>% group_by(bootstrap_cm) %>% tally() %>% filter(n < 5)
badBoots_bp <- A_bootstrap_ordered %>% group_by(bootstrap_bp) %>% tally() %>% filter(n < 5)
A_bootstrap_ordered$bootstrap_cm[A_bootstrap_ordered$bootstrap_cm %in% badBoots_cm$bootstrap_cm] <- NA
A_bootstrap_ordered
badBoots_cm
badBoots_bp
A_bootstrap_ordered$bootstrap_bp[A_bootstrap_ordered$bootstrap_bp %in% badBoots_bp$bootstrap_bp] <- NA
A_bootstrap_ordered
write.table(A_bootstrap_ordered, file = paste("bootstrapMap.Z.txt",sep=""),
append = F, quote = FALSE, sep = "\t",
eol = "\n", na = "NA", dec = ".", row.names = FALSE,
col.names = TRUE, qmethod = c("escape", "double"))
load(file='working_files/intermediate_files/indivlistgeno_A.rdata')
frameworkSNPs <- read.table('frameworkSNPs.list')
frameworkSNPs$SNP <- paste(frameworkSNPs$V1,frameworkSNPs$V2,sep="_")
fullMap <- read.table('all.fixed.txt',fill = T)
fullMap$SNP <- paste(fullMap$V1,fullMap$V2,sep="_")
AframeworkMap <- fullMap %>% filter(V1 %ni% c(39,41) & SNP %in% frameworkSNPs$SNP)
`%ni%` <- Negate(`%in%`)
AframeworkMap <- fullMap %>% filter(V1 %ni% c(39,41) & SNP %in% frameworkSNPs$SNP)
chip <- read.table('working_files/chrom.map',fill=TRUE,header=TRUE)
ASNPS_chip <- left_join(chip,AframeworkMap,by=c("SNPname"="V3"))
map<-read.table('working_files/geno.map',header=TRUE)
ASNPS <- map[map$V1 %ni% c(39,41) ,]
ASNPS$map_pos <- seq(1,length(ASNPS$V1))
ASNPS$SNP_name <- names(indivlistgeno_A[,-c(1:8)])
ASNPS_chip <- left_join(ASNPS_chip,ASNPS[,c(2,6)],by=c("SNPname"="V2"))
View(ASNPS_chip)
#w_size = 3400000
w_size = 5 #cM
win_global = 0
for(lg in na.omit(unique(ASNPS_chip$V1))){
#size_tmp <- sizes$V2[sizes$V1 == lg]
winSeq <- seq(from=0,to=max(ASNPS_chip$V4[ASNPS_chip$V1 == lg],na.rm=T),by = w_size)
for(win in winSeq){
if(win+w_size<=max(winSeq)){
#cat(lg, ((win/w_size) + win_global)," ",win," ",max(winSeq),"\n")
ASNPS_chip$bootstrap[ASNPS_chip$V4 > win & ASNPS_chip$V4 <= (win+w_size) & ASNPS_chip$V1 == lg ] <-
(win/w_size) + win_global
}else{
cat( ((win/w_size) + win_global)," ",win," ",max(winSeq)," skipped\n")
}
}
win_global <- (win/w_size) + win_global + 1 #need to increase window number with each loop across chromosomes
}
ASNPS_ordered <- ASNPS_chip %>% filter(newSNPname != "" & NewScaff %in%  c(
"ScYP8k313HRSCAF58ch1"   , "ScYP8k312HRSCAF54ch1A"   , "ScYP8k3629HRSCAF770ch2" ,  "ScYP8k3866HRSCAF1020ch3" , "ScYP8k311HRSCAF50ch4","ScYP8k314HRSCAF84ch4A"  ,
"ScYP8k39HRSCAF32ch6" , "ScYP8k35HRSCAF18ch5"     , "ScYP8k34HRSCAF13ch7"   , "ScYP8k31HRSCAF1ch8"   ,  "ScYP8k33HRSCAF8ch9" , "ScYP8k32HRSCAF3ch10"   ,
"ScYP8k3869HRSCAF1023ch11",  "ScYP8k3870HRSCAF1029ch12",  "ScYP8k3302HRSCAF431ch13"  , "ScYP8k3651HRSCAF793ch14" ,  "ScYP8k3864HRSCAF1010ch15",
"ScYP8k37HRSCAF29ch17"   , "ScYP8k38HRSCAF31ch18"  ,  "ScYP8k36HRSCAF25ch19" ,"ScYP8k3865HRSCAF1011ch20",   "ScYP8k369HRSCAF175ch21" ,   "ScYP8k369HRSCAF175ch22"  ,
"ScYP8k369HRSCAF175ch23",  "ScYP8k369HRSCAF175ch24" , "ScYP8k369HRSCAF175ch25" ,"ScYP8k369HRSCAF175ch26", "ScYP8k369HRSCAF175ch27"  , "ScYP8k369HRSCAF175ch28"))
ASNPS_ordered$SNPpos <- as.numeric(ASNPS_ordered$SNPpos )
ASNPS_ordered <- ASNPS_ordered[order(ASNPS_ordered$NewScaff,ASNPS_ordered$SNPpos),]
View(ASNPS_ordered)
ASNPS_ordered <- ASNPS_chip %>% filter(!is.na(SNP_name) & newSNPname != "" & NewScaff %in%  c(
"ScYP8k313HRSCAF58ch1"   , "ScYP8k312HRSCAF54ch1A"   , "ScYP8k3629HRSCAF770ch2" ,  "ScYP8k3866HRSCAF1020ch3" , "ScYP8k311HRSCAF50ch4","ScYP8k314HRSCAF84ch4A"  ,
"ScYP8k39HRSCAF32ch6" , "ScYP8k35HRSCAF18ch5"     , "ScYP8k34HRSCAF13ch7"   , "ScYP8k31HRSCAF1ch8"   ,  "ScYP8k33HRSCAF8ch9" , "ScYP8k32HRSCAF3ch10"   ,
"ScYP8k3869HRSCAF1023ch11",  "ScYP8k3870HRSCAF1029ch12",  "ScYP8k3302HRSCAF431ch13"  , "ScYP8k3651HRSCAF793ch14" ,  "ScYP8k3864HRSCAF1010ch15",
"ScYP8k37HRSCAF29ch17"   , "ScYP8k38HRSCAF31ch18"  ,  "ScYP8k36HRSCAF25ch19" ,"ScYP8k3865HRSCAF1011ch20",   "ScYP8k369HRSCAF175ch21" ,   "ScYP8k369HRSCAF175ch22"  ,
"ScYP8k369HRSCAF175ch23",  "ScYP8k369HRSCAF175ch24" , "ScYP8k369HRSCAF175ch25" ,"ScYP8k369HRSCAF175ch26", "ScYP8k369HRSCAF175ch27"  , "ScYP8k369HRSCAF175ch28"))
View(ASNPS_ordered)
ASNPS_ordered$SNPpos <- as.numeric(ASNPS_ordered$SNPpos )
ASNPS_ordered <- ASNPS_ordered[order(ASNPS_ordered$NewScaff,ASNPS_ordered$SNPpos),]
bootstrap = 0
for(scaff in unique(ASNPS_ordered$NewScaff)){
bootstrap = min(ASNPS_ordered$bootstrap[ASNPS_ordered$NewScaff == scaff])
for(snp in ASNPS_ordered$SNPname){
if(ASNPS_ordered$NewScaff[ASNPS_ordered$SNPname == snp ] == scaff){
if( !is.na(ASNPS_ordered$bootstrap[ASNPS_ordered$SNPname == snp & ASNPS_ordered$NewScaff == scaff])){
bootstrap <- ASNPS_ordered$bootstrap[ASNPS_ordered$SNPname == snp & ASNPS_ordered$NewScaff == scaff]
}
if( is.na(ASNPS_ordered$bootstrap[ASNPS_ordered$SNPname == snp & ASNPS_ordered$NewScaff == scaff])){
ASNPS_ordered$bootstrap[ASNPS_ordered$SNPname == snp & ASNPS_ordered$NewScaff == scaff] <- bootstrap
}
}
}
}
A_bootstrap_map <- ASNPS_ordered %>% dplyr::select(SNP_name,V1,NewScaff,V4,SNPpos,bootstrap)
View(A_bootstrap_map)
names(A_bootstrap_map) <- c("SNP","linkage_group","scaff","cM","bp","bootstrap_cm")
sizes <- read.table('working_files/FSJ.chrom.sizes')
A_bootstrap_ordered <- A_bootstrap_map[order(A_bootstrap_map$scaff,A_bootstrap_map$bp),]
w_size = 3300000
win_global = 0
for(scaf in unique(A_bootstrap_ordered$scaff)){
size_tmp <- sizes$V2[sizes$V1 == scaf]
for(win in seq(from=0,to=max(A_bootstrap_ordered$bp[A_bootstrap_ordered$scaff == scaf],na.rm=T),by = w_size)){
if(win+w_size<size_tmp){
#cat(scaf, ((win/w_size) + win_global)," ",win," ",size_tmp,"\n")
A_bootstrap_ordered$bootstrap_bp[A_bootstrap_ordered$bp > win & A_bootstrap_ordered$bp <= (win+w_size) & A_bootstrap_ordered$scaff == scaf] <- (win/w_size) + win_global
}else{
cat(scaf, ((win/w_size) + win_global)," ",win," ",size_tmp," skipped\n")
}
}
win_global <- (win/w_size) + win_global + 1 #need to increase window number with each loop across chromosomes
}
badBoots_cm <- A_bootstrap_ordered %>% group_by(bootstrap_cm) %>% tally() %>% filter(n < 5)
badBoots_bp <- A_bootstrap_ordered %>% group_by(bootstrap_bp) %>% tally() %>% filter(n < 5)
badBoots_cm
badBoots_bp
A_bootstrap_ordered$bootstrap_cm[A_bootstrap_ordered$bootstrap_cm %in% badBoots_cm$bootstrap_cm] <- NA
A_bootstrap_ordered$bootstrap_bp[A_bootstrap_ordered$bootstrap_bp %in% badBoots_bp$bootstrap_bp] <- NA
write.table(A_bootstrap_ordered, file = paste("bootstrapMap.A.txt",sep=""),
append = F, quote = FALSE, sep = "\t",
eol = "\n", na = "NA", dec = ".", row.names = FALSE,
col.names = TRUE, qmethod = c("escape", "double"))
