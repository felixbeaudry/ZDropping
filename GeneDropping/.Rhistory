load("/Users/felix/Google Drive/Research/Manuscripts/ZDropping_all/rose_files/indivGenContrib.rdata")
View(dead2013age1)
library(plyr)
library(dplyr)
library(ggplot2)
library(tidyr)
library(kinship2)
library(cowplot)
library(gridGraphics)
# Plot theme
plottheme <- theme( axis.line.x = element_line(colour="black",size=0.3), axis.line.y = element_line(colour="black",size=0.3),
axis.ticks = element_line(colour = "black",size=0.2),
axis.text = element_text(colour="black"), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), panel.background = element_rect(fill="white"),
plot.background = element_rect(fill = "white"),
axis.text.x = element_text(size=6), axis.text.y = element_text(size=6),
axis.title = element_text(size=7), plot.title = element_text(size=8),
legend.position="right", legend.text = element_text(size=7),
legend.title = element_text(size=8), legend.key = element_rect(colour=NA,fill=NA), legend.key.size=unit(1,"cm"))
library(plyr)
library(dplyr)
library(ggplot2)
library(tidyr)
library(kinship2)
library(cowplot)
# load Rdata file
setwd('~/Google Drive/Research/Data2/fsj/ZDropping_all/')
load("plotIndivGenContrib_tidy_20190529.Rdata") # code to produce all of these tables from raw data is in plotIndivGenContrib_tidy_20190425.R
#plot theme
plottheme <- theme( axis.line.x = element_line(colour="black",size=0.3), axis.line.y = element_line(colour="black",size=0.3),
axis.ticks = element_line(colour = "black",size=0.2),
axis.text = element_text(colour="black"), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), panel.background = element_rect(fill="white"),
plot.background = element_rect(fill = "white"),
axis.text.x = element_text(size=6), axis.text.y = element_text(size=6),
axis.title = element_text(size=7), plot.title = element_text(size=8),
legend.position="right", legend.text = element_text(size=7),
legend.title = element_text(size=8), legend.key = element_rect(colour=NA,fill=NA), legend.key.size=unit(1,"cm"))
load("/Users/felix/Google Drive/Research/Manuscripts/ZDropping_all/rose_files/indivGenContrib.rdata")
library(plyr)
library(dplyr)
library(ggplot2)
library(tidyr)
library(kinship2)
library(cowplot)
library(gridGraphics)
# Plot theme
plottheme <- theme( axis.line.x = element_line(colour="black",size=0.3), axis.line.y = element_line(colour="black",size=0.3),
axis.ticks = element_line(colour = "black",size=0.2),
axis.text = element_text(colour="black"), panel.grid.major = element_blank(),
panel.grid.minor = element_blank(), panel.background = element_rect(fill="white"),
plot.background = element_rect(fill = "white"),
axis.text.x = element_text(size=6), axis.text.y = element_text(size=6),
axis.title = element_text(size=7), plot.title = element_text(size=8),
legend.position="right", legend.text = element_text(size=7),
legend.title = element_text(size=8), legend.key = element_rect(colour=NA,fill=NA), legend.key.size=unit(1,"cm"))
# Read in 1990-2013 breeders data
load("indivGenContrib.rdata")
# Read in and tidy pedigree
ped <- read.table("FSJpedgeno_Zsexlinked.ped", header = FALSE, sep = " ", stringsAsFactors = FALSE)
# Read in and tidy pedigree
ped <- read.table("FSJpedgeno_Zsexlinked.ped", header = FALSE, sep = " ", stringsAsFactors = FALSE)
# Read in and tidy pedigree
ped <- read.table("FSJpedgeno_Zsexlinked.ped", header = FALSE, sep = " ", stringsAsFactors = FALSE)
# Read in and tidy pedigree
ped <- read.table("FSJpedgeno_Zsexlinked.ped", header = FALSE, sep = " ", stringsAsFactors = FALSE)
# Read in and tidy pedigree
ped <- read.table("FSJpedgeno_Zsexlinked.ped", header = FALSE, sep = " ", stringsAsFactors = FALSE)
pedigree <- ped[,1:6]
colnames(pedigree) <- c("Fam", "Indiv", "Dad", "Mom", "Sex", "Pheno")
# Read in all of the data tables including breeders data
load("all_tables_v2.rdata")
# Based on the pedigree, make a list of the descendants of every breeder we'll be looking at
descendants <- NULL
for (i in dead2013age1$USFWS) {
generation = 2
thisGen <- filter(pedigree, Mom==i | Dad==i)
repeat {
if (nrow(thisGen)==0){
break
}
thisGenRow <- select(thisGen, Indiv) %>%
transmute(indiv_id = i, descendant_id = Indiv, relationship = generation)
descendants <- rbind(descendants, thisGenRow)
generation = generation + 1
nextGen <- filter(pedigree, Mom %in% thisGen$Indiv | Dad %in% thisGen$Indiv)
thisGen <- nextGen
}
}
# Read in data on individuals including natal years
indiv_data<-read.table('IndivDataUSFWS.txt',header=TRUE,sep='\t',stringsAsFactors=FALSE)
nestling_data<-select(indiv_data, Indiv, NatalYear)
# add natal year info to descendants dataset
descendants_years <- left_join(descendants, nestling_data, by = c("descendant_id" = "Indiv"))
# how many nestlings are there each year?
num_nestlings_yearly <- group_by(nestling_data, NatalYear) %>%
dplyr::summarize(num_nestlings = n())
# The pair is:
m<-"1513-50363"
f<-"1043-90505"
# make a table for this pair's genealogical contributions by year
# fill out the years where they don't have nestlings with 0s
filter(descendants_years, indiv_id == "1513-50363") %>%
group_by(NatalYear) %>%
dplyr::summarize(num_descendants = n()) %>%
right_join(num_nestlings_yearly) %>%
mutate(num_descendants = ifelse(is.na(num_descendants), 0, num_descendants),
prop_nestlings = num_descendants/num_nestlings) -> genealogical_contribs_by_year
# Get a list of all the individuals we want in this pedigree
# they have all the same descendants so we can just get one's descendants
focal_family <- filter(descendants, indiv_id == f)
# add the two focal individuals to the list
focal_family_indivs <- c(m, f, focal_family$descendant_id)
# Get the pedigree data for this family and modify it a bit for the plot
focal_family_insiders <- filter(pedigree, Indiv %in% focal_family_indivs) %>%
select(Indiv, Dad, Mom, Sex) %>%
mutate(Mom = ifelse(Indiv==m | Indiv==f, NA, Mom), Dad = ifelse(Indiv==m | Indiv == f, NA, Dad))
# Also need the second parent for individuals who have only 1 parent in this tree (make these founders)
focal_family_outsiders <- filter(pedigree, Indiv %in% focal_family_insiders$Mom |
Indiv %in% focal_family_insiders$Dad, !(Indiv %in% focal_family_indivs)) %>%
mutate(Mom = NA, Dad = NA)
# Add those extra parents/outsiders to the family pedigree
focal_family_ped <- bind_rows(focal_family_insiders, focal_family_outsiders) %>%
mutate(Sex = ifelse(Sex==0, 3, Sex)) %>%
select(Indiv, Dad, Mom, Sex)
# We will also need a status variable that says whether the indiv is alive in 2013
# Get last observation for each indiv
focal_family_ped_status <- filter(all.obs, USFWS %in% focal_family_ped$Indiv) %>%
group_by(USFWS) %>%
dplyr::summarize(last_year = max(Year)) %>%
mutate(Status = ifelse(last_year > 2013, 1, 0)) %>%
select(Indiv = USFWS, Status) %>%
right_join(focal_family_ped)
# Draw the pedigree w/ kinship2 package
focal_family_ped_to_plot <- with(focal_family_ped_status[,c(1,3:5,2)], pedigree(Indiv, Dad, Mom, Sex, Status))
plot(focal_family_ped_to_plot, id=rep("", times = nrow(focal_family_ped)), symbolsize = 1)
# use recordPlot() to capture the base R plot in a variable
mated_pair_ped <- recordPlot()
#get autosomal expected genetic contribution data for the male
obsIndivMA<-read.table(file=paste('IndivContrib_',m,'.ped.A.1.drop.data.txt',sep=''),header=TRUE)
simIndivMA<-read.table(file=paste('IndivContrib_',m,'.ped.A.1.drop.sim.txt',sep=''),header=TRUE)
#make sure number of simulations adds up to 1000000
ddply(simIndivMA[simIndivMA$allele==2,],.(cohort),summarize, sum=sum(all_alleles_count))
for (y in c(0:23)){
if (sum(simIndivMA[simIndivMA$allele==2 & simIndivMA$cohort==y,'all_alleles_count'])<1000000) {
simIndivMA<-rbind(simIndivMA,cbind(cohort=y,allele=2,allele_count=0,all_alleles_count=1000000-sum(simIndivMA[simIndivMA$allele==2 & simIndivMA$cohort==y,'all_alleles_count'])))
}
}
ddply(simIndivMA[simIndivMA$allele==2,],.(cohort),summarize, sum=sum(all_alleles_count))
